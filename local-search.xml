<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构（二）——线性表</title>
    <link href="/2021/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2021/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<hr/><h1 id="线性表的定义和基本操作"><a href="#线性表的定义和基本操作" class="headerlink" title="线性表的定义和基本操作"></a>线性表的定义和基本操作</h1><p><em>我们先来分析数据结构三要素——逻辑结构、数据的运算、存储结构（物理结构）</em></p><h2 id="线性表的定义（逻辑结构）"><a href="#线性表的定义（逻辑结构）" class="headerlink" title="线性表的定义（逻辑结构）"></a>线性表的定义（逻辑结构）</h2><p><strong>线性表是具有相同数据类型的n（n&gt;=0）个数据元素的有限序列</strong>，其中n为表长，当n=0时线性表是一个空表。<br/><br>若用L命名线性表，则其一般表示为：L=(a1,a2,…,an)</p><p>几个概念：</p><ol><li>ai是线性表中的“第i个”元素线性表中的位序</li><li>a1是表头元素，an是表尾元素</li><li>除第一个元素外，每个元素有且仅有一个<strong>直接前驱</strong>；除最后一个元素外，每个元素有且仅有一个<strong>直接后继</strong></li></ol><h2 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h2><ul><li>InitList(&amp;L)：初始化表。构造一个空的线性表L，分配内存空间。</li><li>DestroyList(&amp;L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</li><li>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。</li><li>ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</li><li>LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。</li><li>GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。</li><li>Length(L)：求表长。返回线性表L的长度，即L中数据元素的个数。</li><li>PrintList(L)：输出操作。按前后顺序输出线性表L的所有元素值。</li><li>Empty(L)：判空操作。若L为空表，则返回true，否则返回false。</li></ul><blockquote><p>其实学到后面就更会发现，对数据的操作，主要就是创造销毁、增删改查。</p></blockquote><hr/><h1 id="线性表的存储-物理结构"><a href="#线性表的存储-物理结构" class="headerlink" title="线性表的存储/物理结构"></a>线性表的存储/物理结构</h1><h2 id="顺序表（顺序存储）"><a href="#顺序表（顺序存储）" class="headerlink" title="顺序表（顺序存储）"></a>顺序表（顺序存储）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>顺序表——用顺序存储的方式来实现线性表顺序存储。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E6%94%BE%E7%BB%93%E6%9E%84.JPG"></p><h3 id="静态分配的实现"><a href="#静态分配的实现" class="headerlink" title="静态分配的实现"></a>静态分配的实现</h3><p>静态分配的代码模板：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10   <span class="hljs-comment">//定义最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    ElemType data[MaxSize]; <span class="hljs-comment">//用静态“数组”存放数据元素</span><br>    <span class="hljs-keyword">int</span> length;  <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;  <span class="hljs-comment">//顺序表的类型定义（静态分配方式）</span><br></code></pre></td></tr></table></figure><p><em>给各个数据元素分配连续的存储空间，大小为MaxSize*sizeof(ElemType)</em></p><blockquote><p>对于静态分配的顺序表，如果数组满了怎么办？<br/>如果数组满了，那只能放弃了，因为顺序表的长度刚开始确定后就无法修改（存储空间是静态的）</p></blockquote><h3 id="动态分配的实现"><a href="#动态分配的实现" class="headerlink" title="动态分配的实现"></a>动态分配的实现</h3><p>动态分配的顺序表代码模板：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> InitSize 10  <span class="hljs-comment">//顺序表的初始长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    ElemType *data;  <span class="hljs-comment">//指示动态分配数组的指针</span><br>    <span class="hljs-keyword">int</span> MaxSize;  <span class="hljs-comment">//顺序表的最大容量</span><br>    <span class="hljs-keyword">int</span> length;   <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SeqList;    <span class="hljs-comment">//顺序表的类型定义（动态分配方式）</span><br></code></pre></td></tr></table></figure><blockquote><p>C语言中使用malloc、free函数来实现动态资源的申请与释放，下面我们来一一了解：</p><ol><li>malloc函数可以在内存中申请以字节为单位个内存空间，并返回一个指向这片内存空间起始位置的指针（需要强制转换指针类型为你定义的数据元素类型指针）</li><li>free即可以释放malloc申请的空间</li></ol></blockquote><p>下面是一段增加动态数组长度的函数，通过类似这样的函数，我们就可以实现动态地分配顺序表的空间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IncreaseSize</span><span class="hljs-params">(SeqList &amp;L,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    <span class="hljs-comment">//一个局部指针，指向数据区</span><br>    <span class="hljs-keyword">int</span> *p=L.data;<br>    <span class="hljs-comment">//顺序表的指针指向一片新的内存空间</span><br>    L.data=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(L.MaxSize+len)*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-comment">//将原数据区的数据搬运到新的大的内存空间中</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;L.length;i++)&#123;<br>        L.data[i]=p[i];<br>    &#125;<br>    <span class="hljs-comment">//更改顺序表的最大长度</span><br>    L.MaxSize=L.MaxSize+len;<br>    <span class="hljs-comment">//释放p指针所指向的内存空间（即原数据区）</span><br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序表的特点"><a href="#顺序表的特点" class="headerlink" title="顺序表的特点"></a>顺序表的特点</h3><ol><li>随机访问，即可以在O(1)时间内找到第i个元素</li><li>存储密度高，每个节点只存储数据元素</li><li>扩展容量不方便，静态分配方式不可以扩展容量；动态分配方式扩展容量需要的时间复杂度是比较高的</li><li>插入、删除操作不方便，需要移动大量的元素</li></ol><h3 id="各种操作具体实现"><a href="#各种操作具体实现" class="headerlink" title="各种操作具体实现"></a>各种操作具体实现</h3><p><em>下面我们来依次实现线性表的各个常用操作</em></p><h4 id="插入函数"><a href="#插入函数" class="headerlink" title="插入函数"></a>插入函数</h4><p>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置（位序）上插入指定元素e。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10 <span class="hljs-comment">//定义最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data[MaxSize]; <span class="hljs-comment">//用静态数组存放数据元素</span><br>    <span class="hljs-keyword">int</span> length;  <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;  <span class="hljs-comment">//顺序表的类型定义</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>    <span class="hljs-comment">//将第i个元素及之后的元素后移</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=L.length;j&gt;=i;j--)&#123;<br>        L.data[j]=L.data[j<span class="hljs-number">-1</span>];<br>    &#125;<br>    L.data[i<span class="hljs-number">-1</span>]=e;  <span class="hljs-comment">//在位置i处放入e</span><br>    L.length++;  <span class="hljs-comment">//长度加1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    SqList L;  <span class="hljs-comment">//声明一个顺序表</span><br>    InitList(L);  <span class="hljs-comment">//初始化顺序表</span><br>    <span class="hljs-comment">//…………</span><br>    ListInsert(L,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述“插入”代码其实健壮性并不好，有可能插入位置是一个非法位置、有可能插入时顺序表已经满了……这些都应该被考虑进去，故我们可以加强一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>    <span class="hljs-comment">//插入范围合法性判断</span><br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L.length+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;  <br>    <span class="hljs-comment">//存储空间是否满了</span><br>    <span class="hljs-keyword">if</span>(L.length&gt;=MaxSize)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//将第i个元素及之后的元素后移</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=L.length;j&gt;=i;j--)&#123;<br>        L.data[j]=L.data[j<span class="hljs-number">-1</span>];<br>    &#125;<br>    L.data[i<span class="hljs-number">-1</span>]=e;  <span class="hljs-comment">//在位置i处放入e</span><br>    L.length++;  <span class="hljs-comment">//长度加1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>好的代码，应该具有健壮性，能够处理异常情况</em></p><p>下面我们来分析时间复杂度：</p><ul><li>最好情况：新元素插入到表尾，不需要移动元素，循环0次，最好时间复杂度=O(1)</li><li>最坏情况：新元素插入到表头，需要将原有的n个元素全都向后移动，循环n此，最坏时间复杂度=O(n)</li><li>平均情况：假设新元素插入到任何一个位置的概率相同，即i=1,2,3……length+1的概率都是p=1/(n+1)。i=1，循环n次；i=2，循环n-1次；i=3，循环n-2次……i=n+1时，循环0次。平均循环次数=n*p+(n-1)*p+……+1*p=n/2，故平均时间复杂度也就是O(n)</li></ul><h4 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h4><p>ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10 <span class="hljs-comment">//定义最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data[MaxSize]; <span class="hljs-comment">//用静态数组存放数据元素</span><br>    <span class="hljs-keyword">int</span> length;  <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;  <span class="hljs-comment">//顺序表的类型定义</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> &amp;e)</span></span>&#123;<br>    <span class="hljs-comment">//判断i的范围是否合法</span><br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    e=L.data[i<span class="hljs-number">-1</span>];  <span class="hljs-comment">//将被删除的元素赋值给e</span><br>    <span class="hljs-comment">//将第i个位置后面的元素前移</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;L.length;j++)&#123;<br>        L.data[j<span class="hljs-number">-1</span>]=L.data[j];<br>    &#125;<br>    L.length--;   <span class="hljs-comment">//线性表长度减1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    SqList L;  <span class="hljs-comment">//声明一个顺序表</span><br>    <span class="hljs-built_in">InitList</span>(L);  <span class="hljs-comment">//初始化顺序表</span><br>    <span class="hljs-comment">//…………</span><br>    <span class="hljs-keyword">int</span> e=<span class="hljs-number">-1</span>;  <span class="hljs-comment">//用变量e把删除的元素“带回来”</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ListDelete</span>(L,<span class="hljs-number">3</span>,e))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功，删除的元素值为%d\n&quot;</span>,e);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除位置不合法\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面我们来分析时间复杂度：</p><ul><li>最好情况：删除表尾元素，不需要移动元素，循环0次，最好时间复杂度=O(1)</li><li>最坏情况：删除表头元素，需要将原有的n个元素全都向后移动，循环n此，最坏时间复杂度=O(n)</li><li>平均情况：假设删除任何一个元素的概率相同，即i=1,2,3……length+1的概率都是p=1/(n+1)。i=1，循环n-1次；i=2，循环n-2次；i=3，循环n-3次……i=n时，循环0次。平均循环次数=(n-1)*p+(n-2)*p+……+1*p=(n-1)/2，故平均时间复杂度也就是O(n)</li></ul><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><p>GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">ElemType <span class="hljs-title">GetElem</span><span class="hljs-params">(SeqList L,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> L.data[i<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>由于顺序表的各个数据元素在内存中连续存放，因此可以根据其实地址和数据元素大小立即找到第i个元素，故按位查找的时间复杂度是O(1)–“随机存取”特性。</p><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><p>LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SeqList L,<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i&lt;<span class="hljs-number">0</span>;i&lt;L.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(L.data[i]==e)&#123;<br>            <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>有编程常识的我们都知道，“==”可以用来判断基本数据类型，而不能判断结构体类型（除非C++重载运算符），但是请了解：在《数据结构》考研初试中，手写代码可以直接用“==”判断结构体类型</em></p><p>下面我们来分析时间复杂度：</p><ul><li>最好情况：O(1)</li><li>最坏情况：O(n)</li><li>平均情况：假设目标出现在任意一个位置的概率都相同，即i=1,2,3……length的概率都是p=1/n。i=1，循环1次；i=2，循环2次；i=3，循环3次……i=n时，循环n次。平均循环次数=1*p+2*p+……+n*p=(n+1)/2，故平均时间复杂度也就是O(n)</li></ul><h2 id="单链表（链式存储）"><a href="#单链表（链式存储）" class="headerlink" title="单链表（链式存储）"></a>单链表（链式存储）</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>单链表中每个结点除了存放数据元素外，还要存储指向下一个节点的指针。</p><ul><li>优点：不要求大片连续空间，改变容量方便</li><li>缺点：不可随机存取，要耗费一定空间存放指针</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span>               <span class="hljs-comment">//定义单链表结点类型</span><br>    ElemType data;          <span class="hljs-comment">//每个结点存放一个数据元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个结点</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>这样我们就可以动态地操作链表，例如需要增加结点时：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//增加一个新的结点：在内存中申请一个结点所需空间，并用指针p指向这个结点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">p</span>=</span>(struct LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct LNode));<br></code></pre></td></tr></table></figure><blockquote><p>上面我们写类型的时候使用了<code>struct LNode</code>，确实是有点麻烦，这里我们可以使用关键字 typedef，来将数据类型重命名：<br><code>typedef  &lt;数据类型&gt;  &lt;别名&gt;</code></p><p>即下面的两段代码是等价的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span>    <span class="hljs-comment">//定义单链表结点类型</span><br>   ElemType data;        <span class="hljs-comment">//每个结点存放一个数据元素</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>   <span class="hljs-comment">//指针指向下一个结点</span><br>&gt;&#125;LNode,*LinkList;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">&gt;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span>        <span class="hljs-comment">//定义单链表结点类型</span><br>  ElemType data;    <span class="hljs-comment">//每个结点存放一个数据元素</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>   <span class="hljs-comment">//指针指向下一个结点</span><br>&gt;&#125;;<br>&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> <span class="hljs-title">LNode</span>;</span><br>&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">LinkList</span>;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="各种操作具体实现-1"><a href="#各种操作具体实现-1" class="headerlink" title="各种操作具体实现"></a>各种操作具体实现</h3><h4 id="不带头结点的单链表初始化"><a href="#不带头结点的单链表初始化" class="headerlink" title="不带头结点的单链表初始化"></a>不带头结点的单链表初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>    ElemType data;   <span class="hljs-comment">//每个结点存放一个数据元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//指针指向下一个结点</span><br>&#125;LNode,*LinkList;<br><br><span class="hljs-comment">//初始化一个空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br>    L=<span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//空表，暂时还没有任何结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//注意，此处并没有创建一个结点</span><br>    LinkList L; <span class="hljs-comment">//声明一个指向单链表的指针</span><br>    <span class="hljs-comment">//初始化一个空表</span><br>    <span class="hljs-built_in">InitList</span>(L);<br>    <span class="hljs-comment">//…………后续代码…………</span><br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (L==<span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="带头结点的单链表初始化"><a href="#带头结点的单链表初始化" class="headerlink" title="带头结点的单链表初始化"></a>带头结点的单链表初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>    ElemType data;   <span class="hljs-comment">//每个结点存放一个数据元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//指针指向下一个结点</span><br>&#125;LNode,*LinkList;<br><br><span class="hljs-comment">//初始化一个单链表（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br>    L=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));  <span class="hljs-comment">//分配一个头结点</span><br>    <span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)   <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    L-&gt;next=<span class="hljs-literal">NULL</span>; <span class="hljs-comment">//头结点之后暂时还没有结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//注意，此处并没有创建一个结点</span><br>    LinkList L; <span class="hljs-comment">//声明一个指向单链表的指针</span><br>    <span class="hljs-comment">//初始化一个空表</span><br>    <span class="hljs-built_in">InitList</span>(L);<br>    <span class="hljs-comment">//…………后续代码…………</span><br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L-&gt;next==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>那么带不带头结点具体有什么区别呢？</p><ul><li>不带头结点，写代码更麻烦，对第一个数据结点和后续数据结点的处理需要用不同的代码逻辑；对空表和非空表的处理需要用不同的代码逻辑。</li><li>带头结点，写代码会更方便一些，故一般情况下我们都会使用带头结点的单链表。</li></ul></blockquote><h4 id="带头结点的单链表按位序插入"><a href="#带头结点的单链表按位序插入" class="headerlink" title="带头结点的单链表按位序插入"></a>带头结点的单链表按位序插入</h4><p>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> i,ElemType e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p;  <span class="hljs-comment">//指针p指向当前扫描到的结点</span><br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个结点</span><br>    p=L;  <span class="hljs-comment">//L指向头结点，头结点是第0个结点（不存数据）</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i<span class="hljs-number">-1</span>)&#123; <span class="hljs-comment">//循环找到第i-1个结点</span><br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    LNode *s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>    s-&gt;data=e;<br>    s-&gt;next=p-&gt;next;<br>    p-next=s;   <span class="hljs-comment">//将结点s连到p之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="不带头结点的单链表按位序插入"><a href="#不带头结点的单链表按位序插入" class="headerlink" title="不带头结点的单链表按位序插入"></a>不带头结点的单链表按位序插入</h4><p>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> i,ElemType e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//插入第1个结点的操作与其他结点操作不同</span><br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>        LNode *s=(LNode *)<span class="hljs-built_in">mallac</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>        s-&gt;data=e;<br>        s-&gt;next=L;<br>        L=s;  <span class="hljs-comment">//头指针指向新结点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    LNode *p;  <span class="hljs-comment">//指针p指向当前扫描到的结点</span><br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;  <span class="hljs-comment">//当前p指向的是第几个结点</span><br>    p=L;  <span class="hljs-comment">//L指向头结点，头结点是第0个结点（不存数据）</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i<span class="hljs-number">-1</span>)&#123; <span class="hljs-comment">//循环找到第i-1个结点</span><br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    LNode *s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>    s-&gt;data=e;<br>    s-&gt;next=p-&gt;next;<br>    p-next=s;   <span class="hljs-comment">//将结点s连到p之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指定结点的后插操作"><a href="#指定结点的后插操作" class="headerlink" title="指定结点的后插操作"></a>指定结点的后插操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//后插操作：在p结点之后插入元素e</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p,ElemType e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    &#125;<br>    LNode *s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>    <span class="hljs-comment">//内存分配失败</span><br>    <span class="hljs-keyword">if</span>(s==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;data=e;  <span class="hljs-comment">//用结点s保存数据元素e</span><br>    s-&gt;next=p-&gt;next;<br>    p-&gt;next=s;  <span class="hljs-comment">//将结点s连到p之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指定结点的前插操作"><a href="#指定结点的前插操作" class="headerlink" title="指定结点的前插操作"></a>指定结点的前插操作</h4><p><em>单链表的前插操作，往往需要传入头结点，但是我们下面的示例代码，不需要这样，下面的示例代码是将数据给了一个后继结点，狸猫换太子，而且时间复杂度是常数阶，非常聪明</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//前插操作：在p结点之前插入元素e</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertPriorNOde</span><span class="hljs-params">(LNode *p,ElemType e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>    <span class="hljs-comment">//内存分配失败</span><br>    <span class="hljs-keyword">if</span>(s==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;data=p-&gt;next;<br>    p-&gt;next=s;        <span class="hljs-comment">//将新结点s连接到p的后面</span><br>    s-&gt;data=p-&gt;data;  <span class="hljs-comment">//将p中元素复制到s中</span><br>    p-&gt;data=e;        <span class="hljs-comment">//p中元素覆盖为e</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="按位序删除（带头结点）"><a href="#按位序删除（带头结点）" class="headerlink" title="按位序删除（带头结点）"></a>按位序删除（带头结点）</h4><p>ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。<br><em>删除思路：找到第i-1个结点，将其指针指向第i+1个结点，并释放第i个结点</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> i,Elemtype &amp;e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>&gt;&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p;  <span class="hljs-comment">//指针p指向当前扫描到的结点</span><br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个结点</span><br>    p=L;   <span class="hljs-comment">//L指向头结点，头结点是第0个结点（不存数据）</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i<span class="hljs-number">-1</span>)&#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;   <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//第i-1个结点之后已无其他结点</span><br>    <span class="hljs-keyword">if</span>(p-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>    &#125;<br>    LNode *q=p-&gt;next;   <span class="hljs-comment">//令q指向被删除结点</span><br>    e=q-&gt;data;   <span class="hljs-comment">//令q指向被删除结点</span><br>    p-&gt;next=q-&gt;next;    <span class="hljs-comment">//将*q结点从链中“断开”</span><br>    <span class="hljs-built_in">free</span>(q);    <span class="hljs-comment">//释放结点的存储空间</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;   <span class="hljs-comment">//删除成功</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最坏时间复杂度和平均时间复杂度：O(n)<br>最好时间复杂度：O(1)</p><h4 id="指定结点的删除"><a href="#指定结点的删除" class="headerlink" title="指定结点的删除"></a>指定结点的删除</h4><p><em>关于指定的结点的删除，一般我们也是用链表指针开始一个个去找，找到符合条件的之后就进行删除。下面我们来一个不利用头结点的，但是这种方法在处理最后一个结点时会出现bug，这里可以进行特殊处理</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//删除指定结点 p</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteNode</span><span class="hljs-params">(LNode *p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *q=p-&gt;next; <span class="hljs-comment">//令q指向*p的后继结点</span><br>    p-&gt;data=p-&gt;next-&gt;data;  <span class="hljs-comment">//和后继结点交换数据域</span><br>    p-&gt;next=q-&gt;next;   <span class="hljs-comment">//将*q结点从链中断开</span><br>    <span class="hljs-built_in">free</span>(q);   <span class="hljs-comment">//释放后继结点的存储空间</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="带头结点的单链表查找"><a href="#带头结点的单链表查找" class="headerlink" title="带头结点的单链表查找"></a>带头结点的单链表查找</h4><ul><li>GetElem(L,i)：按位查找操作。获取表L的第i个位置的元素的值。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">LNode * <span class="hljs-title">GetELem</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    LNode *p; <span class="hljs-comment">//指针p指向当前扫描到的结点</span><br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;  <span class="hljs-comment">//当前指针p指向的是第几个结点</span><br>    p=L;  <span class="hljs-comment">//L指向头结点，头结点是第0个结点（不存数据）</span><br>    <span class="hljs-comment">//循环找到第i个结点</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i)&#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure>平均时间复杂度：O(n)</li></ul><p><br/><br/></p><ul><li>LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">LNode * <span class="hljs-title">LocateElem</span><span class="hljs-params">(LinkLIst L,ElemType e)</span></span>&#123;<br>    LNode *p=L-&gt;next;<br>    <span class="hljs-comment">//从第1个结点开始查找数据域为e的结点</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;data!=e)<br>        p=p-&gt;next;<br>    <span class="hljs-comment">//找到后返回该结点指针，否则返回NULL</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure>平均时间复杂度：O(n)</li></ul><h4 id="带头结点的表的长度"><a href="#带头结点的表的长度" class="headerlink" title="带头结点的表的长度"></a>带头结点的表的长度</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(LinkList L)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;  <span class="hljs-comment">//统计表长</span><br>    LNode *p=L;<br>    <span class="hljs-keyword">while</span>(p-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        p=p-&gt;next;<br>        len++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(n)</p><h4 id="单链表的建立（带头结点的情况）"><a href="#单链表的建立（带头结点的情况）" class="headerlink" title="单链表的建立（带头结点的情况）"></a>单链表的建立（带头结点的情况）</h4><ul><li>尾插法建立单链表<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//正向建立单链表</span><br><span class="hljs-function">LinkLIst <span class="hljs-title">LIst_TailInsert</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x;  <span class="hljs-comment">//设ElemType为整型</span><br>    L=(LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));  <span class="hljs-comment">//建立头结点</span><br>    LNode *s,*r=L;   <span class="hljs-comment">//r为表尾指针</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);  <span class="hljs-comment">//输入结点的值</span><br>    <span class="hljs-comment">//输入9999代表结束</span><br>    <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">9999</span>)&#123;<br>        s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>        s-&gt;data=x;<br>        r-&gt;next=s;<br>        r=s;   <span class="hljs-comment">//r指向新的表尾结点</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    &#125; <br>    r-&gt;next=<span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//尾结点指针为空</span><br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li>头插法建立单链表<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//逆向建立单链表</span><br><span class="hljs-function">LinkList <span class="hljs-title">List_HeadInsert</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br>    LNode *s;<br>    <span class="hljs-keyword">int</span> x;<br>    L=(LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));  <span class="hljs-comment">//创建头结点</span><br>    L-&gt;next=<span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//创建为空链表（初始化为NULL避免指向的内存脏数据影响程序）</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);  <span class="hljs-comment">//输入结点的值</span><br>    <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">9999</span>)&#123;  <span class="hljs-comment">//输入9999表示结束</span><br>        s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));  <span class="hljs-comment">//创建新结点</span><br>        s-&gt;data=x;<br>        s-&gt;next=L-&gt;next;<br>        L-&gt;next=s;  <span class="hljs-comment">//将新结点插入表中，L为头指针</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>头插法、尾插法：核心就是初始化操作、指定结点的后插操作。</p></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（一）——绪论</title>
    <link href="/2021/04/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%BB%AA%E8%AE%BA/"/>
    <url>/2021/04/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<hr/><h1 id="数据结构在学什么"><a href="#数据结构在学什么" class="headerlink" title="数据结构在学什么"></a>数据结构在学什么</h1><ul><li>如何用程序代码把现实世界的问题信息化</li><li>如何用计算机高效地处理这些信息从而创造价值</li></ul><hr/><h1 id="数据结构的基本概念"><a href="#数据结构的基本概念" class="headerlink" title="数据结构的基本概念"></a>数据结构的基本概念</h1><h2 id="什么是数据？"><a href="#什么是数据？" class="headerlink" title="什么是数据？"></a>什么是数据？</h2><p>数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。</p><p>数据是计算机程序加工的原料。</p><h2 id="数据元素、数据项"><a href="#数据元素、数据项" class="headerlink" title="数据元素、数据项"></a>数据元素、数据项</h2><p>数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。</p><p>一个数据元素可由若干个数据项构成，数据项是构成数据元素的不可分割的最小单位。</p><p><em>要根据实际的业务需求来确定什么是数据元素，什么是数据项</em></p><h2 id="数据结构、数据对象"><a href="#数据结构、数据对象" class="headerlink" title="数据结构、数据对象"></a>数据结构、数据对象</h2><p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</p><p>数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</p><p>小结一下：<br><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1.JPG"></p><hr/><h1 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h1><p><em>讨论一种数据结构时，要关注的三个方面</em></p><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><ul><li>数据的逻辑结构<ul><li><strong>集合</strong>：各个元素同属一个集合，别无其他关系</li><li><strong>线性结构</strong>：数据结构之间是一对一的关系。除了第一个元素，所有元素都有唯一先驱；除了最后一个元素，所有元素都有唯一后继</li><li><strong>树形结构</strong>：数据元素之间是一对多的关系</li><li><strong>图状结构（网状结构）</strong>：数据元素之间是多对多的关系</li></ul></li></ul><h2 id="物理结构（存储结构）"><a href="#物理结构（存储结构）" class="headerlink" title="物理结构（存储结构）"></a>物理结构（存储结构）</h2><p>如何用计算机表示数据元素的逻辑关系？</p><ul><li>数据的存储结构<ul><li><strong>顺序存储</strong>：把相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现</li><li><strong>链式存储</strong>：逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系</li><li><strong>索引存储</strong>：在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是（关键字、地址）</li><li><strong>散列存储</strong>：根据数据元素的关键字直接计算出该元素的存储地址，又称哈希（Hash）存储</li></ul></li></ul><blockquote><p>数据的存储结构会影响存储空间分配的方便程度。<br>数据的存储结构会影响对数据运算的速度。</p></blockquote><h2 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h2><p>施加在数据上的运算包括运算的定义和实现。<span style="color:red">运算的定义是针对逻辑结构的</span>，指出运算的功能；<span style="color:red">运算的实现是针对存储结构的</span>，指出运算的具体步骤。</p><hr/><h1 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a>数据类型、抽象数据类型</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型是一个值的集合和定义在此集合上的一组操作的总称。</p><ol><li>原子类型。其值不可再分的数据类型</li><li>结构类型。其值可以再分解为若干成分（分量）的数据类型</li></ol><h2 id="抽象数据类型（Abstract-Data-Type，ADT）"><a href="#抽象数据类型（Abstract-Data-Type，ADT）" class="headerlink" title="抽象数据类型（Abstract Data Type，ADT）"></a>抽象数据类型（Abstract Data Type，ADT）</h2><p>抽象数据类型（Abstract Data Type，ADT）是抽象数据组织及与之相关的操作。<br><em>ADT用数学化的语言定义数据的逻辑结构、定义运算。与具体的实现无关。</em></p><hr/><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h2><p>程序=数据结构+算法</p><ul><li>数据结构：如何用数据正确地描述现实世界的问题，并存入计算机。</li><li>算法：如何高效地处理这些数据，以解决实际问题。</li></ul><p>算法（Algorithm）<strong>是对特定问题求解步骤的一种描述</strong>，它是指令的有限序列，其中的每条指令表示一个或多个操作</p><h2 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h2><ul><li><strong>有穷性</strong>：一个算法必须在执行有穷步之后结束，且每一步都可在有穷时间内完成。</li><li><strong>确定性</strong>：算法中每条指令必须具有确切的含义，对于相同的输入只能得到相同的输出。</li><li><strong>可行性</strong>：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。</li></ul><blockquote><p>输入：一个算法有零个或多个输入，这些输入取自某个特定对象的集合。<br/><br>输出：一个算法有零个或多个输出，这些输出是与输入有着某种特定关系的量。</p></blockquote><h2 id="好的算法应该具备的特质"><a href="#好的算法应该具备的特质" class="headerlink" title="好的算法应该具备的特质"></a>好的算法应该具备的特质</h2><ul><li>正确性：算法能够正确地解决问题。</li><li>可读性：算法应该具有良好的可读性，以帮助人们理解。</li><li>健壮性：输入非法数据时，算法能够适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li><li>高效率和低存储需求：时间复杂度低，空间复杂度低</li></ul><hr/><h1 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>时间开销与问题规模n之间的关系</strong></p><p>时间复杂度用T表示，即“Time”</p><p>计算法则：</p><ol><li>找到一个基本操作</li><li>分析该基本操作的执行次数x与问题规模n的关系x=f(n)</li><li>x的数量级O(x)就是算法的时间复杂度T(n)</li></ol><p>在我们考虑时间复杂度的时候，只需要考虑阶数高的部分。</p><blockquote><p>我们一般使用大O表示法来描述时间复杂度，大O表示“同阶”，同等数量级。即当n趋向于无穷的时候，二者之比为常数。<br><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8ET.JPG"></p></blockquote><h3 id="运算规则"><a href="#运算规则" class="headerlink" title="运算规则"></a>运算规则</h3><ul><li>加法规则：多项相加，只保留最高阶的项，且系数变为1</li><li>乘法规则：多项相乘，都保留<br><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8A%A0%E6%B3%95%E8%A7%84%E5%88%99%E4%B8%8E%E4%B9%98%E6%B3%95%E8%A7%84%E5%88%99.JPG"></li></ul><p><br/><br/></p><blockquote><p>关于更大项的比较，这里有一个要熟稔于心、倒背如流的比较图：<br><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9B%B4%E5%A4%A7%E9%A1%B9%E6%AF%94%E8%BE%83%E5%9B%BE.JPG"><br>助记口令：“常对幂指阶”</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>顺序执行的代码只会影响常数项，可以忽略</li><li>只需挑循环中的一个基本操作分析它的执行次数与n的关系即可</li><li>如果有多层嵌套循环，只需关注最深层循环了几次，浅层的循环都是低阶，都将被忽略</li><li>很多算法的执行时间和输入的数据是有关系的，对于这一类的算法我们需要考虑不同情况下的时间复杂度：<ol><li>最坏时间复杂度：最坏情况下算法的时间复杂度</li><li>最好时间复杂度（参考意义不大）：最好情况下算法的时间复杂度</li><li>平均时间复杂度：所有输入示例等概率出现的情况下，算法的期望运行时间</li></ol></li></ol><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>空间开销（内存开销）与问题规模n之间的关系</strong></p><p>空间复杂度用S表示，即“Space”</p><p>计算规则：</p><ol><li>考虑其代码段</li><li>考虑其数据段</li><li>综合考虑</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>程序的空间复杂度若是常数阶，S(n)=O(1)，我们称这种算法为<strong>原地工作</strong>，即算法所需的内存空间为常量，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saylove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=n)&#123;<br>        i++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I love you %d\n&quot;</span>,i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;over&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>而更多的例子往往就不是“原地工作”了，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> flag[n];  <span class="hljs-comment">//声明一个长度为n的数组</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-comment">//…………</span><br>&#125;<br></code></pre></td></tr></table></figure><p>假设一个int变量占用4B<br>则所需内存空间=4+4n+4=4n+8<br>同理于时间复杂度，我们只需要关注最高阶，则此程序的空间复杂度S(n)=O(n)<br/><br><em>只需要关注存储空间大小与问题规模相关的变量</em><br><br/></p><h3 id="运算规则-1"><a href="#运算规则-1" class="headerlink" title="运算规则"></a>运算规则</h3><ul><li>加法规则：多项相加，只保留最高阶的项，且系数变为1</li><li>乘法规则：多项相乘，都保留</li></ul><h3 id="函数递归调用带来的内存开销"><a href="#函数递归调用带来的内存开销" class="headerlink" title="函数递归调用带来的内存开销"></a>函数递归调用带来的内存开销</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveyou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b,c;  <span class="hljs-comment">//定义一系列局部变量</span><br>    <span class="hljs-comment">//……省略代码</span><br>    <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">1</span>)&#123;<br>        loveyou(n<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I love you %d\n&quot;</span>,n);<br>&#125;<br></code></pre></td></tr></table></figure><p>例如n=5，第一层数据段占用了3 *4=12个字节，第二层又是12个字节，则五层下来，最后是60个字节，即12n，故S(n)=O(n)。</p><p>对于递归程序，我们不要怕，老老实实分析每一层去找规律即可。<br><em>一般情况下递归程序的S(n)=kO(n)（k即多少层），这也就直接等于S(n)=O(n)</em></p><hr/><br/><br/><br/>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
