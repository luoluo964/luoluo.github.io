<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构（三）——栈与队列</title>
    <link href="/2021/05/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    <url>/2021/05/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<hr/><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><em>线性表是具有相同数据类型的n个数据元素的有限序列</em></p><p>栈（Stack）是只允许在一端进行插入或删除操作的线性表（操作受限的线性表）。</p><blockquote><p>相关术语：</p><ul><li>栈顶：允许插入和删除的一端</li><li>栈底：不允许插入和删除的一端</li></ul></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>特点：后进先出</p><h2 id="栈的基本操作"><a href="#栈的基本操作" class="headerlink" title="栈的基本操作"></a>栈的基本操作</h2><ul><li>InitStack(&amp;S)：初始化栈。构成一个空栈S，分配内存空间。</li><li>DestroyStack(&amp;L)：销毁栈，销毁并释放栈S所占用的内存空间。</li><li>Push(&amp;S,x)：进栈，若栈S未满，则将x加入使之成为新堆栈。</li><li>Pop(&amp;S,&amp;x)：出栈，若栈S非空，则弹出栈顶元素，并用x返回。</li><li>GetTop(S,&amp;x)：读栈顶元素。若栈非空，则用x返回栈顶元素。</li><li>StackEmpty(S)：判断一个栈S是否为空。若S为空，则返回true，否则返回false。</li></ul><h2 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h2><p>卡特兰数公式可以帮助我们快速得出一个栈结构有多少种合法的出栈序列：<br><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0.JPG"></p><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>用顺序存储方式实现的栈</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="顺序栈的定义"><a href="#顺序栈的定义" class="headerlink" title="顺序栈的定义"></a>顺序栈的定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10  <span class="hljs-comment">//定义栈中元素的最大个数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>ElemType data[MaxSize];  <span class="hljs-comment">//静态数组存放栈中元素</span><br><span class="hljs-keyword">int</span> top; <span class="hljs-comment">//栈顶指针</span><br>&#125;SqStack;<br></code></pre></td></tr></table></figure><p>栈顶指针一般来说记录的是数组的下标，即一般是从0开始的。</p><h4 id="顺序栈的初始化"><a href="#顺序栈的初始化" class="headerlink" title="顺序栈的初始化"></a>顺序栈的初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//初始化栈</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SqStack &amp;S)</span></span>&#123;<br>S.top=<span class="hljs-number">-1</span>;<span class="hljs-comment">//初始化栈顶指针</span><br>&#125;  <br></code></pre></td></tr></table></figure><h4 id="判断栈空"><a href="#判断栈空" class="headerlink" title="判断栈空"></a>判断栈空</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//判断栈空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">StackEmpty</span><span class="hljs-params">(SqStack S)</span></span>&#123;<br><span class="hljs-keyword">if</span>(S.top==<span class="hljs-number">-1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="新元素入栈"><a href="#新元素入栈" class="headerlink" title="新元素入栈"></a>新元素入栈</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//新元素入栈</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(SqStack &amp;S,ElemType x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(S.top==MaxSize<span class="hljs-number">-1</span>)  <span class="hljs-comment">//栈满，报错</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>S.data[++S.top]=x;  <span class="hljs-comment">//新元素入栈</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="元素出栈"><a href="#元素出栈" class="headerlink" title="元素出栈"></a>元素出栈</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//出栈操作</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SqStack &amp;S,ElemType &amp;x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(S.top==<span class="hljs-number">-1</span>)<span class="hljs-comment">//栈空，报错</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>x=S.data[S.top--];  <span class="hljs-comment">//栈顶元素先出栈</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="得到栈顶元素"><a href="#得到栈顶元素" class="headerlink" title="得到栈顶元素"></a>得到栈顶元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//读栈顶元素</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">GetTop</span><span class="hljs-params">(SqStack S,ElemType &amp;x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(S.top==<span class="hljs-number">-1</span>)  <span class="hljs-comment">//栈空，报错</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>x=S.data[S.top];  <span class="hljs-comment">//x记录栈顶元素</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里我们的设计是让栈顶指针指向了栈的最上面的元素的数组下标（类似于处理器中的SP寄存器——堆栈指针，是时刻指向最上面的元素的），其实往往还有另一种设计思路是让栈顶指针指向最上面的元素的下一个位置，如上的代码就都要有所改动，这里不再赘述。</p></blockquote><h3 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h3><p>为了提高空间利用率，还可以在一个结构体中设计两个指针，一个初始化时指向-1，另一个指向MaxSize，一个从上往下、一个从下往上，判断栈满就判断两个指针是否即将相遇即可。</p><h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>用链式存储方式实现的栈</p><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span> </span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>    ElemType data;   <span class="hljs-comment">//每个结点存放一个数据元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//指针指向下一个结点</span><br>&#125;LNode,*LinkList;<br></code></pre></td></tr></table></figure><h4 id="初始化（不带头结点）"><a href="#初始化（不带头结点）" class="headerlink" title="初始化（不带头结点）"></a>初始化（不带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//初始化一个空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br>    L=<span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//空表，暂时还没有任何结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="入栈操作（不带头结点）"><a href="#入栈操作（不带头结点）" class="headerlink" title="入栈操作（不带头结点）"></a>入栈操作（不带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Push</span><span class="hljs-params">(LinkList &amp;L,ElemType e)</span></span>&#123;<br>LNode *s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>    <span class="hljs-keyword">if</span>(s==<span class="hljs-literal">NULL</span>) <span class="hljs-comment">//空间分配失败</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>s-&gt;data=e;<br>    s-&gt;next=L;<br>    L=s;   <br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="出栈（不带头结点）"><a href="#出栈（不带头结点）" class="headerlink" title="出栈（不带头结点）"></a>出栈（不带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//出栈</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Pop</span><span class="hljs-params">(LinkList &amp;L,ElemType &amp;e)</span></span>&#123;<br><span class="hljs-keyword">if</span>(!L) <span class="hljs-comment">//如果栈为空</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>e=L-&gt;data;<br>L=L-&gt;next;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他操作并不难，就请读者自行实现。</p><hr/><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h2 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h2><p>队列（Queue）是只允许在一端进行插入，在另一端删除的线性表。</p><blockquote><p>相关术语：</p><ul><li>队头：允许插入的一端</li><li>队尾：允许删除的一端</li><li>空队列：没有元素的队列</li></ul></blockquote><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><p>特点：先进先出</p><h2 id="队列的基本操作"><a href="#队列的基本操作" class="headerlink" title="队列的基本操作"></a>队列的基本操作</h2><ul><li>InitQueue(&amp;Q)：初始化队列，构造一个空队列Q。</li><li>DestroyQueue(&amp;Q)：销毁队列。销毁并释放队列Q所占用的内存空间。</li><li>EnQueue(&amp;Q,x)：入队，若队列Q未满，将x加入，使之成为新的队尾。</li><li>DeQueue(&amp;Q,&amp;x)：出队，若队列Q非空，删除队头元素，并用x返回。</li><li>GetHead(Q,&amp;x)：读队列元素，若队列Q非空，则将队头元素赋值给x。</li></ul><h2 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>用顺序存储方式实现的队列。</p><h3 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="队列的顺序实现"><a href="#队列的顺序实现" class="headerlink" title="队列的顺序实现"></a>队列的顺序实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//定义队列中元素的最大个数</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10 </span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-comment">//用静态数组存放队列元素</span><br>ElemType data[MaxSize];<br><span class="hljs-comment">//队头指针和队尾指针</span><br><span class="hljs-keyword">int</span> front,rear;<br>&#125;SqQueue;<br></code></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(SqQueue &amp;Q)</span></span>&#123;<br><span class="hljs-comment">//初始时，队头、队尾指针指向0</span><br>Q.rear=Q.front=<span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们的设计中，通常队头指针是指向队头元素；队尾指针则是指向即将添加的位置。</p><h4 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">QueueEmpty</span><span class="hljs-params">(SqQueue Q)</span></span>&#123;<br><span class="hljs-keyword">if</span>(Q.rear==Q.front)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="入队操作"><a href="#入队操作" class="headerlink" title="入队操作"></a>入队操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//入队</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(SqQueue &amp;Q,ElemType x)</span></span>&#123;<br><span class="hljs-keyword">if</span>((Q.rear+<span class="hljs-number">1</span>)%MaxSize==Q.front) <br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//队满时报错</span><br>Q.data[Q.rear]=x; <span class="hljs-comment">//将x插入队尾</span><br>Q.rear=(Q.rear+<span class="hljs-number">1</span>)%MaxSize;  <span class="hljs-comment">//队尾指针后移</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们的队列需要利用取余操作使得队尾指针回到前面的内存中，从而确保出队后的前面的空间也可以被很好地利用。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%98%9F%E5%88%97%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C.JPG"></p><p>另外，这边相信你也看出来了，我们的牺牲掉了一个空间不存放数据来方便判满，为什么不让front和rear指向一处来判满呢？因为这样就和判空的条件一样了，从而不能正确地实现逻辑。</p><blockquote><p>如果要求不浪费该存储空间，则可以在顺序队列的定义时附加一个size变量来记录长度，当rear等于front时，size为MaxSize则队满，size为0则队空。</p></blockquote><blockquote><p>又或者可以定义个tag标记变量，每次删除操作成功时，令tag为0,；每次插入操作成功时，令tag为1。当rear等于front，通过tag的最后一次操作即可知道队列是满还是空</p></blockquote><h4 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//出队（删除一个队头元素，并用x返回）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(SqQueue &amp;Q,ElemType &amp;x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(Q.rear==Q.front) <span class="hljs-comment">//判断队空</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">//队空则报错</span><br>x=Q.data[Q.front];<br>Q.front=(Q.front+<span class="hljs-number">1</span>)%MaxSize; <span class="hljs-comment">//队头指针后移</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取队头元素"><a href="#获取队头元素" class="headerlink" title="获取队头元素"></a>获取队头元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">GetHead</span><span class="hljs-params">(SqQueue Q,ElemType &amp;x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(Q.rear==Q.front)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">//队空则报错</span><br>x=Q.data[Q.front];<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果我们想要计算队列中元素的个数：<br>(rear+MaxSize-front)%MaxSize</p></blockquote><h2 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h2><h3 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h3><p>用链式存储方式实现的队列。</p><h3 id="基本操作-3"><a href="#基本操作-3" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span>&#123;</span> <span class="hljs-comment">//链式队列结点</span><br>ElemType data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LinkNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span>  <span class="hljs-comment">//链式队列</span><br>LinkNode *front,*rear;  <span class="hljs-comment">//队列的队头和队尾指针</span><br>&#125;LinkQueue;<br></code></pre></td></tr></table></figure><h4 id="初始化队列（带头结点）"><a href="#初始化队列（带头结点）" class="headerlink" title="初始化队列（带头结点）"></a>初始化队列（带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//初始化队列（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span>&#123;<br><span class="hljs-comment">//初始时，front、rear都指向头结点</span><br>Q.front=Q.rear=(LinkNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LinkNode));<br>Q.front-&gt;next=<span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判空（带头结点）"><a href="#判空（带头结点）" class="headerlink" title="判空（带头结点）"></a>判空（带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkQueue Q)</span></span>&#123;<br><span class="hljs-keyword">if</span>(Q.front==Q.rear)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="初始化队列（不带头结点）"><a href="#初始化队列（不带头结点）" class="headerlink" title="初始化队列（不带头结点）"></a>初始化队列（不带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//初始化队列（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(LinkQueue &amp;Q)</span></span>&#123;<br><span class="hljs-comment">//初始时，front、rear都指向NULL</span><br>Q.front=<span class="hljs-literal">NULL</span>;<br>Q.rear=<span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判空（不带头结点）"><a href="#判空（不带头结点）" class="headerlink" title="判空（不带头结点）"></a>判空（不带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(LinkQueue Q)</span></span>&#123;<br><span class="hljs-keyword">if</span>(!Q.front)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="入队（带头结点）"><a href="#入队（带头结点）" class="headerlink" title="入队（带头结点）"></a>入队（带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//入队</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q,ElemType x)</span></span>&#123;<br>LinkNode *s=(LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LinkNode));<br>s-&gt;data=x;<br>s-&gt;next=<span class="hljs-literal">NULL</span>;<br>Q.rear-&gt;next=s;  <span class="hljs-comment">//新结点插入到rear之后</span><br>Q.rear=s;  <span class="hljs-comment">//修改表尾指针</span><br>&#125;<br></code></pre></td></tr></table></figure><p><em>这里可以看出，我们的案例中，顺序队列里rear尾指针是指向下一个待插空间的；而链队列里rear尾指针是指向最后一个元素的</em></p><h4 id="入队（不带头结点）"><a href="#入队（不带头结点）" class="headerlink" title="入队（不带头结点）"></a>入队（不带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//入队</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">EnQueue</span><span class="hljs-params">(LinkQueue &amp;Q,ElemType x)</span></span>&#123;<br>LinkNode *s=(LinkNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LinkNode));<br>s-&gt;data=x;<br>s-&gt;next=<span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span>(Q.front==<span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">//第一个结点特殊处理</span><br>Q.front=s;<br>Q.rear=s;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>Q.rear-&gt;next=s; <span class="hljs-comment">//新结点插入rear后面</span><br>Q.rear=s; <span class="hljs-comment">//修改rear结点</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="出队（带头结点）"><a href="#出队（带头结点）" class="headerlink" title="出队（带头结点）"></a>出队（带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//出队</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q,ElemType &amp;x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(Q.front==Q.rear)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//空队</span><br>LinkNode *p=Q.front-&gt;next;<br>x=p-&gt;data;<span class="hljs-comment">//用变量x返回队头元素</span><br>Q.front-&gt;next=p-&gt;next;  <span class="hljs-comment">//修改头结点的next指针</span><br><span class="hljs-keyword">if</span>(Q.rear==p)<br>Q.rear=Q.front;  <span class="hljs-comment">//修改rear指针</span><br><span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">//释放结点空间</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>front永远指向头结点</em></p><h4 id="出队（不带头结点）"><a href="#出队（不带头结点）" class="headerlink" title="出队（不带头结点）"></a>出队（不带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//出队</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeQueue</span><span class="hljs-params">(LinkQueue &amp;Q,ElemType &amp;x)</span></span>&#123;<br><span class="hljs-keyword">if</span>(Q.front==<span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//空队</span><br>LinkNode *p=Q.front;<br>x=p-&gt;data;<span class="hljs-comment">//用变量x返回队头元素</span><br>Q.front=p-&gt;next; <br><span class="hljs-keyword">if</span>(Q.rear==p)&#123;<br>Q.rear=<span class="hljs-literal">NULL</span>;<br>Q.front=<span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-built_in">free</span>(p);  <span class="hljs-comment">//释放结点空间</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr/><h1 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h1><h2 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h2><h3 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h3><p>分析一串字符串中的“()”、“[]”、“{}”是否成双出现。</p><blockquote><p>我们通过分析可以发现两个括号分析的特点：</p><ol><li>最后出现的左括号最先被匹配</li><li>每出现一个右括号，就“消耗”一个左括号</li></ol></blockquote><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95.JPG"></p><h3 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">bracketCheck</span><span class="hljs-params">(<span class="hljs-keyword">char</span> str[],<span class="hljs-keyword">int</span> length)</span></span>&#123;<br>SqStack S;<br><span class="hljs-built_in">InitStack</span>(S);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br><span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;(&#x27;</span>||str[i]==<span class="hljs-string">&#x27;[&#x27;</span>||str[i]==<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br><span class="hljs-built_in">Push</span>(S,str[i]);  <span class="hljs-comment">//扫描到左括号，入栈</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;)&#x27;</span>||str[i]==<span class="hljs-string">&#x27;]&#x27;</span>||str[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">StackEmpty</span>(S))  <span class="hljs-comment">//扫描到右括号，且当前栈空</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>ElemType topElem;<br><span class="hljs-built_in">Pop</span>(S,topElem);  <span class="hljs-comment">//栈顶元素出栈</span><br><span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;)&#x27;</span>&amp;&amp;topElem!=<span class="hljs-string">&#x27;(&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;]&#x27;</span>&amp;&amp;topElem!=<span class="hljs-string">&#x27;[&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(str[i]==<span class="hljs-string">&#x27;&#125;&#x27;</span>&amp;&amp;topElem!=<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h2><h3 id="三种算术表达式"><a href="#三种算术表达式" class="headerlink" title="三种算术表达式"></a>三种算术表达式</h3><p><em>表达式：表达算术运算的式子，往往由三个部分组成：操作数、运算符、界限符</em></p><ul><li>中缀表达式：即普通的表达式。运算符在两个操作数的中间。中缀表达式中界限符（即括号）是必要的，表明了计算优先顺序。</li><li>后缀表达式：又称逆波兰表达式。运算符在两个操作数的后面。</li><li>前缀表达式：又称波兰表达式。运算符在两个操作数的前面。</li></ul><h3 id="逆波兰表达式-波兰表达式换算"><a href="#逆波兰表达式-波兰表达式换算" class="headerlink" title="逆波兰表达式/波兰表达式换算"></a>逆波兰表达式/波兰表达式换算</h3><p>以逆波兰表达式为例，将当前运算中的运算符移至右边，如此往复:</p><ol><li>确定中缀表达式中各个运算符的运算顺序</li><li>选择下一个运算符，按照[左操作数 右操作数 运算符]的方式组合成一个新的操作数</li><li>如果还有运算符没有被处理，则重复2</li></ol><p><em>如：a+b-c*d  –&gt; ab+cd*-</em> </p><p><strong>注意：严格意义上后缀表达式并不唯一，如下图所示，为了确保算法的“唯一性”，我们默认转换表达式时，只要左边的运算符能被先运算，就优先从左运算（左优先原则），如果是前缀表达式，则遵循右优先原则</strong></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%89%E7%A7%8D%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%8D%E5%94%AF%E4%B8%80.JPG"></p><h3 id="后缀表达式运算（用栈实现）"><a href="#后缀表达式运算（用栈实现）" class="headerlink" title="后缀表达式运算（用栈实现）"></a>后缀表达式运算（用栈实现）</h3><ol><li>将数1加入栈</li><li>将数2加入栈</li><li>遇到符号，将数1、数2取出和符号运算，然后将运算结果放入栈作新的数1</li><li>如此往复</li></ol><p><em>计算机更适合用后缀表达式去计算，故很多基于栈的编程语言：Forth、PostScribe都是用后缀表达式来运算的</em></p><h3 id="中缀表达式转后缀表达式（用栈实现）"><a href="#中缀表达式转后缀表达式（用栈实现）" class="headerlink" title="中缀表达式转后缀表达式（用栈实现）"></a>中缀表达式转后缀表达式（用栈实现）</h3><p>主要思路：</p><ol><li>初始化一个栈，用于保存暂时还不确定运算顺序的运算符。</li><li>从左到右处理各个元素，直到末尾。可能遇到三种情况：<ol><li>遇到<strong>操作数</strong>，直接加入后缀表达式。</li><li>遇到<strong>界限符</strong>，遇到“(”直接入栈；遇到“)”则依次弹出栈内运算符并加入后缀表达式，知道弹出“(”为止。注意：“(”不加入后缀表达式。</li><li>遇到<strong>运算符</strong>。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式。若碰到“(”或栈空则停止。之后再把当前运算符入栈。</li></ol></li><li>按上述方法处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式。</li></ol><h3 id="中缀表达式的计算（用栈实现）"><a href="#中缀表达式的计算（用栈实现）" class="headerlink" title="中缀表达式的计算（用栈实现）"></a>中缀表达式的计算（用栈实现）</h3><p><em>前面我们了解过利用栈来进行后缀表达式的计算，可以发现很简单，也正因如此说计算机更适合用后缀表达式运算，现在我们来了解一下用中缀表达式计算，其实也就是上面两个算法的集合。</em><br><br/><br/></p><ol><li>初始化两个栈，操作数栈和运算符栈。</li><li>若扫描到操作数，压入操作数栈。</li><li>若扫描到运算符或者界限符，则按照“中缀转后缀”相同的逻辑压入运算符栈（期间也会弹出运算符，每弹出一个运算符时，就需要再弹出两个操作数栈的栈顶元素并执行相应运算，运算结果再压回操作数栈） </li><li>扫描完成后，弹出运算符栈的所有运算符，每弹出一个，就弹出两个操作数进行运算。</li></ol><h2 id="栈与递归"><a href="#栈与递归" class="headerlink" title="栈与递归"></a>栈与递归</h2><h3 id="函数调用的背后"><a href="#函数调用的背后" class="headerlink" title="函数调用的背后"></a>函数调用的背后</h3><p>函数调用时，需要一个栈存储：</p><ol><li>调用返回地址：函数执行完成后返回的地址，即调用函数的那条语句的下一条语句的地址。当程序返回后，调用函数的语句的下一条语句就会被执行（地址被赋给CS、IP寄存器，即将被CPU执行）</li><li>实参：调用函数传来的参数，这两个参数放在栈中被临时保存，这也就是为什么一般传参是“值传递”，因为子函数下的参数是栈中的“临时数据”</li><li>局部变量：子函数中定义的局部变量，在子函数执行完成后会被回收。</li></ol><blockquote><p>递归调用时，函数调用栈可称为“递归工作栈”</p><ul><li>每进入一层递归，就将递归调用所需信息压入栈顶</li><li>每退出一层递归，就从栈顶弹出相应信息</li></ul></blockquote><h3 id="栈在递归中的应用"><a href="#栈在递归中的应用" class="headerlink" title="栈在递归中的应用"></a>栈在递归中的应用</h3><p>适合用“递归”算法解决：可以把原始问题转换为属性相同，但规模较小的问题。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%E6%A0%88-%E6%B1%82%E9%98%B6%E4%B9%98.JPG"></p><p><strong>递归缺点：太多层递归可能会导致栈溢出</strong></p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%E6%A0%88-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97.JPG"></p><p><strong>递归缺点：递归可能会包含很多重复计算</strong></p><h1 id="队列的应用"><a href="#队列的应用" class="headerlink" title="队列的应用"></a>队列的应用</h1><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><h3 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h3><p>只允许从两端插入、两端删除的线性表</p><blockquote><p>延伸出更多的变种：</p><ul><li>输入受限的双端队列：只允许从一端插入、两端删除的线性表。</li><li>输出受限的双端队列：只允许从两端插入、一端删除的线性表。</li></ul></blockquote><p><em>关于这种问题只要知道哪种输出顺序是可能实现的即可，这里不再赘述</em></p><h2 id="树的层次遍历"><a href="#树的层次遍历" class="headerlink" title="树的层次遍历"></a>树的层次遍历</h2><h3 id="遍历规则"><a href="#遍历规则" class="headerlink" title="遍历规则"></a>遍历规则</h3><ol><li>将树的头结点放入队列。</li><li>从队头中拿出当前结点，将其子节点（如果有的话）插入队尾</li><li>重复2，即可遍历树的全部结点</li></ol><h2 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h2><h3 id="遍历规则-1"><a href="#遍历规则-1" class="headerlink" title="遍历规则"></a>遍历规则</h3><ol><li>将某个结点放入队列</li><li>从队头中拿出当前结点，检查当前结点相邻的结点有没有遍历过，将没有遍历过的结点插入队尾</li><li>重复2，即可遍历图的全部结点</li></ol><h2 id="应用于操作系统————先来先服务"><a href="#应用于操作系统————先来先服务" class="headerlink" title="应用于操作系统————先来先服务"></a>应用于操作系统————先来先服务</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>多个进程争抢着有限的系统资源时，FCFS（First Come First Service，先来先服务）是一种常用策略。</p><h2 id="矩阵的压缩存储"><a href="#矩阵的压缩存储" class="headerlink" title="矩阵的压缩存储"></a>矩阵的压缩存储</h2><h3 id="数组的存储结构"><a href="#数组的存储结构" class="headerlink" title="数组的存储结构"></a>数组的存储结构</h3><h4 id="一维数组的存储结构"><a href="#一维数组的存储结构" class="headerlink" title="一维数组的存储结构"></a>一维数组的存储结构</h4><p>各数组元素大小相同，且物理上连续存放。</p><blockquote><p>以0为起始下标的数组元素a[i]的存放地址：LOC+i*sizeof(ElemType);</p></blockquote><h4 id="二维数组的存储结构"><a href="#二维数组的存储结构" class="headerlink" title="二维数组的存储结构"></a>二维数组的存储结构</h4><p>在逻辑上，我们的二维数组是像一个表格一样存储的；但是在实际内存中，存储只能是线性的，一般有两种方法：</p><ol><li>行优先存储：将二维数组按行优先一行一行地存储。</li><li>列优先存储：将二维数组按列优先一列一列地存储。</li></ol><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%86%85%E5%AD%98%E5%AD%98%E5%82%A8.JPG"></p><blockquote><p>若按行优先存储，则M行N列的二维数组中，以0为起始下标的数组元素a[i][j]的存放地址：LOC+(i*N+j)*sizeof(ElemType)；若是列优先，则：LOC+(j*M+j)*sizeof(ElemType)</p></blockquote><h3 id="矩阵存储"><a href="#矩阵存储" class="headerlink" title="矩阵存储"></a>矩阵存储</h3><h4 id="普通矩阵"><a href="#普通矩阵" class="headerlink" title="普通矩阵"></a>普通矩阵</h4><p>对于普通的矩阵，我们往往利用二维数组来存储。</p><p><em>对于下面的特殊矩阵，我们就可以利用特殊的存储方式来压缩存储空间</em></p><h4 id="对称矩阵"><a href="#对称矩阵" class="headerlink" title="对称矩阵"></a>对称矩阵</h4><p>若n阶方阵中任意一个元素aij都有a<sub>ij</sub>=a<sub>ji</sub>，则该矩阵为对称矩阵。</p><p>压缩存储策略：只存储主对角线+下三角区（或主对角线+上三角区，我们以前者为例）</p><p>我们按照行优先原则将各元素存入一维数组。</p><p>即我们是n阶矩阵，则我们的数组存储总大小应该是：(1+n)*n/2。</p><p>我们需要来创建一个映射函数，来将矩阵的下标映射为一维数组里的某个元素。</p><p>根据行优先原则，我们可以推出：</p><ul><li>当i&gt;=j时，a<sub>ij</sub>对应的一维数组的是第[1+2+……+(i-1)]+j个元素，即(i-1)*i/2+j个元素（这里是位序，如果按下标去考虑则还要减一）。</li><li>当i&lt;j时，我们可以利用对称矩阵的性质，将a<sub>ij</sub>转换为a<sub>ji</sub>，</li></ul><h4 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h4><p>以下三角矩阵为例：除了主对角线和下三角区，其余的所有元素都是一个常数。</p><p>压缩存储策略：按行优先原则将主对角线和下三角区域存放在一维数组中。并在最后一个位置存储常数C。</p><p><em>即相比于对称矩阵来说，我们需要多一个存储单元</em></p><p>下面我们来思考映射思路：</p><p>根据行优先原则，我们可以推出：</p><ul><li>当i&gt;=j时，a<sub>ij</sub>对应的一维数组的是第[1+2+……+(i-1)]+j个元素，即(i-1)*i/2+j个元素（这里是位序，如果按下标去考虑则还要减一）。</li><li>当i&lt;j时，位序直接就是n*(n+1)/2+1。</li></ul><p>在三角矩阵的存储中，我们还需要考虑一下上三角矩阵的情况：<br>即当i&lt;=j时，访问元素a<sub>ij</sub>的话，前面的行（即第1行至i-1行）共有n+(n-1)+……+(n-i+2)个元素（<em>第1行n个、第2行n-1个，数字规律推得第(n-1)行有(n-i+2)个元素</em>），而第i行的第j个元素在一维数组中是这行的第(j-i)+1个元素，故：</p><ul><li>当i&lt;=j，k=(i-1)*(2n-i+2)/2+(i-j)+1（这里是位序）</li><li>当i&gt;j，k=(n+1)*n/2+1</li></ul><h4 id="三对角矩阵"><a href="#三对角矩阵" class="headerlink" title="三对角矩阵"></a>三对角矩阵</h4><p>三角矩阵，又称带状矩阵：<br>当[i-j]&gt;1时，有a<sub>ij</sub>=0（i&lt;=i,j&lt;=n）</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%89%E5%AF%B9%E8%A7%92%E7%9F%A9%E9%98%B5%E7%A4%BA%E6%84%8F%E5%9B%BE.JPG"></p><p>由图可知，除了第一行和最后一行，其他每一行有效元素都是三个，故我们的一维数组总长度就是：3*n-2。</p><p>下面我们来考虑映射思路：<br>按行优先原则，a<sub>ij</sub>是第几个元素？<br>前i-1个行共3*(i-1)-1个元素；a<sub>ij</sub>是第i行第j-i+2个元素；故a<sub>ij</sub>是2*i+j-2个元素。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%89%E5%AF%B9%E8%A7%92%E7%9F%A9%E9%98%B5%E9%80%9A%E8%BF%87%E4%BD%8D%E5%BA%8F%E6%8E%A8%E4%BD%8D%E7%BD%AE.JPG"></p><h4 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h4><p>非零元素远远小于矩阵元素的个数。</p><p>压缩存储策略：</p><ul><li>顺序存储——三元组&lt;行，列，值&gt;</li><li>链式存储——十字链表法</li></ul><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8.JPG"></p><hr/><hr/><hr/>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（二）——线性表</title>
    <link href="/2021/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/2021/04/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<hr/><h1 id="线性表的定义和基本操作"><a href="#线性表的定义和基本操作" class="headerlink" title="线性表的定义和基本操作"></a>线性表的定义和基本操作</h1><p><em>我们先来分析数据结构三要素——逻辑结构、数据的运算、存储结构（物理结构）</em></p><h2 id="线性表的定义（逻辑结构）"><a href="#线性表的定义（逻辑结构）" class="headerlink" title="线性表的定义（逻辑结构）"></a>线性表的定义（逻辑结构）</h2><p><strong>线性表是具有相同数据类型的n（n&gt;=0）个数据元素的有限序列</strong>，其中n为表长，当n=0时线性表是一个空表。<br/><br>若用L命名线性表，则其一般表示为：L=(a1,a2,…,an)</p><p>几个概念：</p><ol><li>ai是线性表中的“第i个”元素线性表中的位序</li><li>a1是表头元素，an是表尾元素</li><li>除第一个元素外，每个元素有且仅有一个<strong>直接前驱</strong>；除最后一个元素外，每个元素有且仅有一个<strong>直接后继</strong></li></ol><h2 id="线性表的基本操作"><a href="#线性表的基本操作" class="headerlink" title="线性表的基本操作"></a>线性表的基本操作</h2><ul><li>InitList(&amp;L)：初始化表。构造一个空的线性表L，分配内存空间。</li><li>DestroyList(&amp;L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间。</li><li>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。</li><li>ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</li><li>LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。</li><li>GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。</li><li>Length(L)：求表长。返回线性表L的长度，即L中数据元素的个数。</li><li>PrintList(L)：输出操作。按前后顺序输出线性表L的所有元素值。</li><li>Empty(L)：判空操作。若L为空表，则返回true，否则返回false。</li></ul><blockquote><p>其实学到后面就更会发现，对数据的操作，主要就是创造销毁、增删改查。</p></blockquote><hr/><h1 id="线性表的存储-物理结构"><a href="#线性表的存储-物理结构" class="headerlink" title="线性表的存储/物理结构"></a>线性表的存储/物理结构</h1><h2 id="顺序表（顺序存储）"><a href="#顺序表（顺序存储）" class="headerlink" title="顺序表（顺序存储）"></a>顺序表（顺序存储）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>顺序表——用顺序存储的方式来实现线性表顺序存储。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。</p><p><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%AD%98%E6%94%BE%E7%BB%93%E6%9E%84.JPG"></p><h3 id="静态分配的实现"><a href="#静态分配的实现" class="headerlink" title="静态分配的实现"></a>静态分配的实现</h3><p>静态分配的代码模板：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10   <span class="hljs-comment">//定义最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    ElemType data[MaxSize]; <span class="hljs-comment">//用静态“数组”存放数据元素</span><br>    <span class="hljs-keyword">int</span> length;  <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;  <span class="hljs-comment">//顺序表的类型定义（静态分配方式）</span><br></code></pre></td></tr></table></figure><p><em>给各个数据元素分配连续的存储空间，大小为MaxSize*sizeof(ElemType)</em></p><blockquote><p>对于静态分配的顺序表，如果数组满了怎么办？<br/>如果数组满了，那只能放弃了，因为顺序表的长度刚开始确定后就无法修改（存储空间是静态的）</p></blockquote><h3 id="动态分配的实现"><a href="#动态分配的实现" class="headerlink" title="动态分配的实现"></a>动态分配的实现</h3><p>动态分配的顺序表代码模板：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> InitSize 10  <span class="hljs-comment">//顺序表的初始长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    ElemType *data;  <span class="hljs-comment">//指示动态分配数组的指针</span><br>    <span class="hljs-keyword">int</span> MaxSize;  <span class="hljs-comment">//顺序表的最大容量</span><br>    <span class="hljs-keyword">int</span> length;   <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SeqList;    <span class="hljs-comment">//顺序表的类型定义（动态分配方式）</span><br></code></pre></td></tr></table></figure><blockquote><p>C语言中使用malloc、free函数来实现动态资源的申请与释放，下面我们来一一了解：</p><ol><li>malloc函数可以在内存中申请以字节为单位个内存空间，并返回一个指向这片内存空间起始位置的指针（需要强制转换指针类型为你定义的数据元素类型指针）</li><li>free即可以释放malloc申请的空间</li></ol></blockquote><p>下面是一段增加动态数组长度的函数，通过类似这样的函数，我们就可以实现动态地分配顺序表的空间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">IncreaseSize</span><span class="hljs-params">(SeqList &amp;L,<span class="hljs-keyword">int</span> len)</span></span>&#123;<br>    <span class="hljs-comment">//一个局部指针，指向数据区</span><br>    <span class="hljs-keyword">int</span> *p=L.data;<br>    <span class="hljs-comment">//顺序表的指针指向一片新的内存空间</span><br>    L.data=(<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>(L.MaxSize+len)*<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">int</span>));<br>    <span class="hljs-comment">//将原数据区的数据搬运到新的大的内存空间中</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;L.length;i++)&#123;<br>        L.data[i]=p[i];<br>    &#125;<br>    <span class="hljs-comment">//更改顺序表的最大长度</span><br>    L.MaxSize=L.MaxSize+len;<br>    <span class="hljs-comment">//释放p指针所指向的内存空间（即原数据区）</span><br>    <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="顺序表的特点"><a href="#顺序表的特点" class="headerlink" title="顺序表的特点"></a>顺序表的特点</h3><ol><li>随机访问，即可以在O(1)时间内找到第i个元素</li><li>存储密度高，每个节点只存储数据元素</li><li>扩展容量不方便，静态分配方式不可以扩展容量；动态分配方式扩展容量需要的时间复杂度是比较高的</li><li>插入、删除操作不方便，需要移动大量的元素</li></ol><h3 id="各种操作具体实现"><a href="#各种操作具体实现" class="headerlink" title="各种操作具体实现"></a>各种操作具体实现</h3><p><em>下面我们来依次实现线性表的各个常用操作</em></p><h4 id="插入函数"><a href="#插入函数" class="headerlink" title="插入函数"></a>插入函数</h4><p>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置（位序）上插入指定元素e。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10 <span class="hljs-comment">//定义最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data[MaxSize]; <span class="hljs-comment">//用静态数组存放数据元素</span><br>    <span class="hljs-keyword">int</span> length;  <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;  <span class="hljs-comment">//顺序表的类型定义</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>    <span class="hljs-comment">//将第i个元素及之后的元素后移</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=L.length;j&gt;=i;j--)&#123;<br>        L.data[j]=L.data[j<span class="hljs-number">-1</span>];<br>    &#125;<br>    L.data[i<span class="hljs-number">-1</span>]=e;  <span class="hljs-comment">//在位置i处放入e</span><br>    L.length++;  <span class="hljs-comment">//长度加1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    SqList L;  <span class="hljs-comment">//声明一个顺序表</span><br>    InitList(L);  <span class="hljs-comment">//初始化顺序表</span><br>    <span class="hljs-comment">//…………</span><br>    ListInsert(L,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述“插入”代码其实健壮性并不好，有可能插入位置是一个非法位置、有可能插入时顺序表已经满了……这些都应该被考虑进去，故我们可以加强一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>    <span class="hljs-comment">//插入范围合法性判断</span><br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L.length+<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;  <br>    <span class="hljs-comment">//存储空间是否满了</span><br>    <span class="hljs-keyword">if</span>(L.length&gt;=MaxSize)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//将第i个元素及之后的元素后移</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=L.length;j&gt;=i;j--)&#123;<br>        L.data[j]=L.data[j<span class="hljs-number">-1</span>];<br>    &#125;<br>    L.data[i<span class="hljs-number">-1</span>]=e;  <span class="hljs-comment">//在位置i处放入e</span><br>    L.length++;  <span class="hljs-comment">//长度加1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>好的代码，应该具有健壮性，能够处理异常情况</em></p><p>下面我们来分析时间复杂度：</p><ul><li>最好情况：新元素插入到表尾，不需要移动元素，循环0次，最好时间复杂度=O(1)</li><li>最坏情况：新元素插入到表头，需要将原有的n个元素全都向后移动，循环n此，最坏时间复杂度=O(n)</li><li>平均情况：假设新元素插入到任何一个位置的概率相同，即i=1,2,3……length+1的概率都是p=1/(n+1)。i=1，循环n次；i=2，循环n-1次；i=3，循环n-2次……i=n+1时，循环0次。平均循环次数=n*p+(n-1)*p+……+1*p=n/2，故平均时间复杂度也就是O(n)</li></ul><h4 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h4><p>ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10 <span class="hljs-comment">//定义最大长度</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data[MaxSize]; <span class="hljs-comment">//用静态数组存放数据元素</span><br>    <span class="hljs-keyword">int</span> length;  <span class="hljs-comment">//顺序表的当前长度</span><br>&#125;SqList;  <span class="hljs-comment">//顺序表的类型定义</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(SqList &amp;L,<span class="hljs-keyword">int</span> i,<span class="hljs-keyword">int</span> &amp;e)</span></span>&#123;<br>    <span class="hljs-comment">//判断i的范围是否合法</span><br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>||i&gt;L.length) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    e=L.data[i<span class="hljs-number">-1</span>];  <span class="hljs-comment">//将被删除的元素赋值给e</span><br>    <span class="hljs-comment">//将第i个位置后面的元素前移</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=i;j&lt;L.length;j++)&#123;<br>        L.data[j<span class="hljs-number">-1</span>]=L.data[j];<br>    &#125;<br>    L.length--;   <span class="hljs-comment">//线性表长度减1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    SqList L;  <span class="hljs-comment">//声明一个顺序表</span><br>    <span class="hljs-built_in">InitList</span>(L);  <span class="hljs-comment">//初始化顺序表</span><br>    <span class="hljs-comment">//…………</span><br>    <span class="hljs-keyword">int</span> e=<span class="hljs-number">-1</span>;  <span class="hljs-comment">//用变量e把删除的元素“带回来”</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ListDelete</span>(L,<span class="hljs-number">3</span>,e))<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除成功，删除的元素值为%d\n&quot;</span>,e);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除位置不合法\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面我们来分析时间复杂度：</p><ul><li>最好情况：删除表尾元素，不需要移动元素，循环0次，最好时间复杂度=O(1)</li><li>最坏情况：删除表头元素，需要将原有的n个元素全都向后移动，循环n此，最坏时间复杂度=O(n)</li><li>平均情况：假设删除任何一个元素的概率相同，即i=1,2,3……length+1的概率都是p=1/(n+1)。i=1，循环n-1次；i=2，循环n-2次；i=3，循环n-3次……i=n时，循环0次。平均循环次数=(n-1)*p+(n-2)*p+……+1*p=(n-1)/2，故平均时间复杂度也就是O(n)</li></ul><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><p>GetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">ElemType <span class="hljs-title">GetElem</span><span class="hljs-params">(SeqList L,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> L.data[i<span class="hljs-number">-1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>由于顺序表的各个数据元素在内存中连续存放，因此可以根据其实地址和数据元素大小立即找到第i个元素，故按位查找的时间复杂度是O(1)–“随机存取”特性。</p><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><p>LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">LocateElem</span><span class="hljs-params">(SeqList L,<span class="hljs-keyword">int</span> e)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i&lt;<span class="hljs-number">0</span>;i&lt;L.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(L.data[i]==e)&#123;<br>            <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>有编程常识的我们都知道，“==”可以用来判断基本数据类型，而不能判断结构体类型（除非C++重载运算符），但是请了解：在《数据结构》考研初试中，手写代码可以直接用“==”判断结构体类型</em></p><p>下面我们来分析时间复杂度：</p><ul><li>最好情况：O(1)</li><li>最坏情况：O(n)</li><li>平均情况：假设目标出现在任意一个位置的概率都相同，即i=1,2,3……length的概率都是p=1/n。i=1，循环1次；i=2，循环2次；i=3，循环3次……i=n时，循环n次。平均循环次数=1*p+2*p+……+n*p=(n+1)/2，故平均时间复杂度也就是O(n)</li></ul><h2 id="单链表（链式存储）"><a href="#单链表（链式存储）" class="headerlink" title="单链表（链式存储）"></a>单链表（链式存储）</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>单链表中每个结点除了存放数据元素外，还要存储指向下一个节点的指针。</p><ul><li>优点：不要求大片连续空间，改变容量方便</li><li>缺点：不可随机存取，要耗费一定空间存放指针</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span>               <span class="hljs-comment">//定义单链表结点类型</span><br>    ElemType data;          <span class="hljs-comment">//每个结点存放一个数据元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>     <span class="hljs-comment">//指针指向下一个结点</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>这样我们就可以动态地操作链表，例如需要增加结点时：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//增加一个新的结点：在内存中申请一个结点所需空间，并用指针p指向这个结点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">p</span>=</span>(struct LNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(struct LNode));<br></code></pre></td></tr></table></figure><blockquote><p>上面我们写类型的时候使用了<code>struct LNode</code>，确实是有点麻烦，这里我们可以使用关键字 typedef，来将数据类型重命名：<br><code>typedef  &lt;数据类型&gt;  &lt;别名&gt;</code></p><p>即下面的两段代码是等价的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span>    <span class="hljs-comment">//定义单链表结点类型</span><br>   ElemType data;        <span class="hljs-comment">//每个结点存放一个数据元素</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>   <span class="hljs-comment">//指针指向下一个结点</span><br>&gt;&#125;LNode,*LinkList;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">&gt;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span>        <span class="hljs-comment">//定义单链表结点类型</span><br>  ElemType data;    <span class="hljs-comment">//每个结点存放一个数据元素</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span>   <span class="hljs-comment">//指针指向下一个结点</span><br>&gt;&#125;;<br>&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> <span class="hljs-title">LNode</span>;</span><br>&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">LinkList</span>;</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="各种操作具体实现-1"><a href="#各种操作具体实现-1" class="headerlink" title="各种操作具体实现"></a>各种操作具体实现</h3><h4 id="不带头结点的单链表初始化"><a href="#不带头结点的单链表初始化" class="headerlink" title="不带头结点的单链表初始化"></a>不带头结点的单链表初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>    ElemType data;   <span class="hljs-comment">//每个结点存放一个数据元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//指针指向下一个结点</span><br>&#125;LNode,*LinkList;<br><br><span class="hljs-comment">//初始化一个空的单链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br>    L=<span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//空表，暂时还没有任何结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//注意，此处并没有创建一个结点</span><br>    LinkList L; <span class="hljs-comment">//声明一个指向单链表的指针</span><br>    <span class="hljs-comment">//初始化一个空表</span><br>    <span class="hljs-built_in">InitList</span>(L);<br>    <span class="hljs-comment">//…………后续代码…………</span><br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(LinkList L)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> (L==<span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="带头结点的单链表初始化"><a href="#带头结点的单链表初始化" class="headerlink" title="带头结点的单链表初始化"></a>带头结点的单链表初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>    ElemType data;   <span class="hljs-comment">//每个结点存放一个数据元素</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span> <span class="hljs-comment">//指针指向下一个结点</span><br>&#125;LNode,*LinkList;<br><br><span class="hljs-comment">//初始化一个单链表（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br>    L=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));  <span class="hljs-comment">//分配一个头结点</span><br>    <span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)   <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    L-&gt;next=<span class="hljs-literal">NULL</span>; <span class="hljs-comment">//头结点之后暂时还没有结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//注意，此处并没有创建一个结点</span><br>    LinkList L; <span class="hljs-comment">//声明一个指向单链表的指针</span><br>    <span class="hljs-comment">//初始化一个空表</span><br>    <span class="hljs-built_in">InitList</span>(L);<br>    <span class="hljs-comment">//…………后续代码…………</span><br>&#125;<br><br><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L-&gt;next==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>那么带不带头结点具体有什么区别呢？</p><ul><li>不带头结点，写代码更麻烦，对第一个数据结点和后续数据结点的处理需要用不同的代码逻辑；对空表和非空表的处理需要用不同的代码逻辑。</li><li>带头结点，写代码会更方便一些，故一般情况下我们都会使用带头结点的单链表。</li></ul></blockquote><h4 id="带头结点的单链表按位序插入"><a href="#带头结点的单链表按位序插入" class="headerlink" title="带头结点的单链表按位序插入"></a>带头结点的单链表按位序插入</h4><p>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> i,ElemType e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p;  <span class="hljs-comment">//指针p指向当前扫描到的结点</span><br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个结点</span><br>    p=L;  <span class="hljs-comment">//L指向头结点，头结点是第0个结点（不存数据）</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i<span class="hljs-number">-1</span>)&#123; <span class="hljs-comment">//循环找到第i-1个结点</span><br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    LNode *s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>    s-&gt;data=e;<br>    s-&gt;next=p-&gt;next;<br>    p-next=s;   <span class="hljs-comment">//将结点s连到p之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="不带头结点的单链表按位序插入"><a href="#不带头结点的单链表按位序插入" class="headerlink" title="不带头结点的单链表按位序插入"></a>不带头结点的单链表按位序插入</h4><p>ListInsert(&amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//在第i个位置插入元素e（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListInsert</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> i,ElemType e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//插入第1个结点的操作与其他结点操作不同</span><br>    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>        LNode *s=(LNode *)<span class="hljs-built_in">mallac</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>        s-&gt;data=e;<br>        s-&gt;next=L;<br>        L=s;  <span class="hljs-comment">//头指针指向新结点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    LNode *p;  <span class="hljs-comment">//指针p指向当前扫描到的结点</span><br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;  <span class="hljs-comment">//当前p指向的是第几个结点</span><br>    p=L;  <span class="hljs-comment">//L指向头结点，头结点是第0个结点（不存数据）</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i<span class="hljs-number">-1</span>)&#123; <span class="hljs-comment">//循环找到第i-1个结点</span><br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    LNode *s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>    s-&gt;data=e;<br>    s-&gt;next=p-&gt;next;<br>    p-next=s;   <span class="hljs-comment">//将结点s连到p之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指定结点的后插操作"><a href="#指定结点的后插操作" class="headerlink" title="指定结点的后插操作"></a>指定结点的后插操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//后插操作：在p结点之后插入元素e</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextNode</span><span class="hljs-params">(LNode *p,ElemType e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    &#125;<br>    LNode *s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>    <span class="hljs-comment">//内存分配失败</span><br>    <span class="hljs-keyword">if</span>(s==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;data=e;  <span class="hljs-comment">//用结点s保存数据元素e</span><br>    s-&gt;next=p-&gt;next;<br>    p-&gt;next=s;  <span class="hljs-comment">//将结点s连到p之后</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指定结点的前插操作"><a href="#指定结点的前插操作" class="headerlink" title="指定结点的前插操作"></a>指定结点的前插操作</h4><p><em>单链表的前插操作，往往需要传入头结点，但是我们下面的示例代码，不需要这样，下面的示例代码是将数据给了一个后继结点，狸猫换太子，而且时间复杂度是常数阶，非常聪明</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//前插操作：在p结点之前插入元素e</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertPriorNOde</span><span class="hljs-params">(LNode *p,ElemType e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>    <span class="hljs-comment">//内存分配失败</span><br>    <span class="hljs-keyword">if</span>(s==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    s-&gt;data=p-&gt;next;<br>    p-&gt;next=s;        <span class="hljs-comment">//将新结点s连接到p的后面</span><br>    s-&gt;data=p-&gt;data;  <span class="hljs-comment">//将p中元素复制到s中</span><br>    p-&gt;data=e;        <span class="hljs-comment">//p中元素覆盖为e</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="按位序删除（带头结点）"><a href="#按位序删除（带头结点）" class="headerlink" title="按位序删除（带头结点）"></a>按位序删除（带头结点）</h4><p>ListDelete(&amp;L,i,&amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。<br><em>删除思路：找到第i-1个结点，将其指针指向第i+1个结点，并释放第i个结点</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">ListDelete</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> i,Elemtype &amp;e)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">1</span>&gt;&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *p;  <span class="hljs-comment">//指针p指向当前扫描到的结点</span><br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;  <span class="hljs-comment">//当前p指向的是第几个结点</span><br>    p=L;   <span class="hljs-comment">//L指向头结点，头结点是第0个结点（不存数据）</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i<span class="hljs-number">-1</span>)&#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)&#123;   <span class="hljs-comment">//i值不合法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//第i-1个结点之后已无其他结点</span><br>    <span class="hljs-keyword">if</span>(p-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <br>    &#125;<br>    LNode *q=p-&gt;next;   <span class="hljs-comment">//令q指向被删除结点</span><br>    e=q-&gt;data;   <span class="hljs-comment">//令q指向被删除结点</span><br>    p-&gt;next=q-&gt;next;    <span class="hljs-comment">//将*q结点从链中“断开”</span><br>    <span class="hljs-built_in">free</span>(q);    <span class="hljs-comment">//释放结点的存储空间</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;   <span class="hljs-comment">//删除成功</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最坏时间复杂度和平均时间复杂度：O(n)<br>最好时间复杂度：O(1)</p><h4 id="指定结点的删除"><a href="#指定结点的删除" class="headerlink" title="指定结点的删除"></a>指定结点的删除</h4><p><em>关于指定的结点的删除，一般我们也是用链表指针开始一个个去找，找到符合条件的之后就进行删除。下面我们来一个不利用头结点的，但是这种方法在处理最后一个结点时会出现bug，这里可以进行特殊处理</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//删除指定结点 p</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteNode</span><span class="hljs-params">(LNode *p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    LNode *q=p-&gt;next; <span class="hljs-comment">//令q指向*p的后继结点</span><br>    p-&gt;data=p-&gt;next-&gt;data;  <span class="hljs-comment">//和后继结点交换数据域</span><br>    p-&gt;next=q-&gt;next;   <span class="hljs-comment">//将*q结点从链中断开</span><br>    <span class="hljs-built_in">free</span>(q);   <span class="hljs-comment">//释放后继结点的存储空间</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单链表查找（带头结点）"><a href="#单链表查找（带头结点）" class="headerlink" title="单链表查找（带头结点）"></a>单链表查找（带头结点）</h4><ul><li>GetElem(L,i)：按位查找操作。获取表L的第i个位置的元素的值。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">LNode * <span class="hljs-title">GetELem</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> i)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    LNode *p; <span class="hljs-comment">//指针p指向当前扫描到的结点</span><br>    <span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;  <span class="hljs-comment">//当前指针p指向的是第几个结点</span><br>    p=L;  <span class="hljs-comment">//L指向头结点，头结点是第0个结点（不存数据）</span><br>    <span class="hljs-comment">//循环找到第i个结点</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;j&lt;i)&#123;<br>        p=p-&gt;next;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure>平均时间复杂度：O(n)</li></ul><p><br/><br/></p><ul><li>LocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">LNode * <span class="hljs-title">LocateElem</span><span class="hljs-params">(LinkLIst L,ElemType e)</span></span>&#123;<br>    LNode *p=L-&gt;next;<br>    <span class="hljs-comment">//从第1个结点开始查找数据域为e的结点</span><br>    <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">NULL</span>&amp;&amp;p-&gt;data!=e)<br>        p=p-&gt;next;<br>    <span class="hljs-comment">//找到后返回该结点指针，否则返回NULL</span><br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure>平均时间复杂度：O(n)</li></ul><h4 id="带头结点的表的长度"><a href="#带头结点的表的长度" class="headerlink" title="带头结点的表的长度"></a>带头结点的表的长度</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(LinkList L)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;  <span class="hljs-comment">//统计表长</span><br>    LNode *p=L;<br>    <span class="hljs-keyword">while</span>(p-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        p=p-&gt;next;<br>        len++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度：O(n)</p><h4 id="单链表的建立（带头结点）"><a href="#单链表的建立（带头结点）" class="headerlink" title="单链表的建立（带头结点）"></a>单链表的建立（带头结点）</h4><ul><li>尾插法建立单链表<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//正向建立单链表</span><br><span class="hljs-function">LinkLIst <span class="hljs-title">LIst_TailInsert</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> x;  <span class="hljs-comment">//设ElemType为整型</span><br>    L=(LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));  <span class="hljs-comment">//建立头结点</span><br>    LNode *s,*r=L;   <span class="hljs-comment">//r为表尾指针</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);  <span class="hljs-comment">//输入结点的值</span><br>    <span class="hljs-comment">//输入9999代表结束</span><br>    <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">9999</span>)&#123;<br>        s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));<br>        s-&gt;data=x;<br>        r-&gt;next=s;<br>        r=s;   <span class="hljs-comment">//r指向新的表尾结点</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    &#125; <br>    r-&gt;next=<span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//尾结点指针为空</span><br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ul><li>头插法建立单链表<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//逆向建立单链表</span><br><span class="hljs-function">LinkList <span class="hljs-title">List_HeadInsert</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br>    LNode *s;<br>    <span class="hljs-keyword">int</span> x;<br>    L=(LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));  <span class="hljs-comment">//创建头结点</span><br>    L-&gt;next=<span class="hljs-literal">NULL</span>;   <span class="hljs-comment">//创建为空链表（初始化为NULL避免指向的内存脏数据影响程序）</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);  <span class="hljs-comment">//输入结点的值</span><br>    <span class="hljs-keyword">while</span>(x!=<span class="hljs-number">9999</span>)&#123;  <span class="hljs-comment">//输入9999表示结束</span><br>        s=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));  <span class="hljs-comment">//创建新结点</span><br>        s-&gt;data=x;<br>        s-&gt;next=L-&gt;next;<br>        L-&gt;next=s;  <span class="hljs-comment">//将新结点插入表中，L为头指针</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>头插法、尾插法：核心就是初始化操作、指定结点的后插操作。</p></blockquote></li></ul><h2 id="双链表（链式存储）"><a href="#双链表（链式存储）" class="headerlink" title="双链表（链式存储）"></a>双链表（链式存储）</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>双链表就是在单链表的基础上，再增加一个指向前驱结点的前驱指针。</p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//定义双链表结点类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span>&#123;</span><br>    ElemType data;  <span class="hljs-comment">//数据域</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">DNode</span> * <span class="hljs-title">prior</span>,*<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//前驱和后继指针</span><br>&#125;DNode,*DLinklist;<br></code></pre></td></tr></table></figure><h3 id="各种操作具体实现-2"><a href="#各种操作具体实现-2" class="headerlink" title="各种操作具体实现"></a>各种操作具体实现</h3><h4 id="双链表的初始化（带头结点）"><a href="#双链表的初始化（带头结点）" class="headerlink" title="双链表的初始化（带头结点）"></a>双链表的初始化（带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//初始化双链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitDLinkList</span><span class="hljs-params">(DLinklist &amp;L)</span></span>&#123;<br>    L=(DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(DNode)); <span class="hljs-comment">//分配一个头结点</span><br>    <span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    L-&gt;prior=<span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//头结点的prior永远指向NULL</span><br>    L-&gt;next=<span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//头结点之后暂时没有结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="判空操作"><a href="#判空操作" class="headerlink" title="判空操作"></a>判空操作</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//判断双链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(DLinklist L)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L-&gt;next==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双链表的插入（带头结点）"><a href="#双链表的插入（带头结点）" class="headerlink" title="双链表的插入（带头结点）"></a>双链表的插入（带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//在p结点之后插入s结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextDNode</span><span class="hljs-params">(DNode *p,DNode *s)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>||s==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    s-&gt;next=p-&gt;next;  <span class="hljs-comment">//将结点*s插入到结点*p之后</span><br>    <span class="hljs-keyword">if</span>(p-&gt;next!=<span class="hljs-literal">NULL</span>)<br>        p-&gt;next-&gt;prior=s;<br>    s-&gt;prior=p;<br>    p-&gt;next=s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="双链表删除（带头结点）"><a href="#双链表删除（带头结点）" class="headerlink" title="双链表删除（带头结点）"></a>双链表删除（带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//删除结点p的后继结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteNextDNode</span><span class="hljs-params">(DNode *p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//找到p的后继结点q</span><br>    DNode *q=p-&gt;next;<br>    <span class="hljs-keyword">if</span>(q==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    p-&gt;next=q-&gt;next;<br>    <span class="hljs-comment">//q结点不是最后一个结点</span><br>    <span class="hljs-keyword">if</span>(q-&gt;next!=<span class="hljs-literal">NULL</span>)<br>        q-&gt;next-&gt;prior=p;<br>    <span class="hljs-comment">//释放结点空间</span><br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="销毁链表（带头结点）"><a href="#销毁链表（带头结点）" class="headerlink" title="销毁链表（带头结点）"></a>销毁链表（带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DestroyList</span><span class="hljs-params">(DLinklist &amp;L)</span></span>&#123;<br>    <span class="hljs-comment">//循环释放</span><br>    <span class="hljs-keyword">while</span>(L-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>        <span class="hljs-built_in">DeleteNextDNode</span>(L);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(L); <span class="hljs-comment">//释放头结点</span><br>    L=<span class="hljs-literal">NULL</span>;  <span class="hljs-comment">//头指针指向NULL</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="遍历双链表（带头结点）"><a href="#遍历双链表（带头结点）" class="headerlink" title="遍历双链表（带头结点）"></a>遍历双链表（带头结点）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//展示所有元素</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ShowElement</span><span class="hljs-params">(DLinklist L)</span></span>&#123;<br><span class="hljs-keyword">while</span>(L-&gt;next)&#123;<br><span class="hljs-comment">//对结点L-&gt;next的各种操作</span><br>L=L-&gt;next;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>双链表不可随机存取，按位查找、按值查找操作都只能使用遍历的方式实现，时间复杂度O(n)</p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>我们学习的单链表和双链表，最后的指针都指向了NULL，而我们的循环链表，就是将表尾结点的next指针指回了头结点。</p><h3 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h3><ul><li><p>当初始化时，我们的头结点指针应该指向自己。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//初始化一个单链表（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br>    L=(LNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LNode));  <span class="hljs-comment">//分配一个头结点</span><br>    <span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)   <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    L-&gt;next=L; <span class="hljs-comment">//头结点之后暂时还没有结点</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当判空时，直接检测头结点的下一个结点是不是自身即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//判断单链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L-&gt;next==L)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>对于查找操作，单链表的某一结点不能再找到其前驱的所有结点；而循环单链表则可以再次找到。</p></li><li><p>我们经常进行头尾结点的操作（头插法、尾插法），我们可以直接将头结点指针L指向链表的最后一个结点，这样只需O(1)的时间复杂度就可以回到头位置进行头操作，而我们的尾操作也可以直接进行，而不需要以前从头移到尾再操作。</p></li></ul><h3 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h3><ul><li><p>初始化操作：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//初始化双链表</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InitDLinkList</span><span class="hljs-params">(DLinklist &amp;L)</span></span>&#123;<br>    L=(DNode *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(DNode)); <span class="hljs-comment">//分配一个头结点</span><br>    <span class="hljs-keyword">if</span>(L==<span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//内存不足，分配失败</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    L-&gt;prior=L;  <br>    L-&gt;next=L; <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>判空操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//判断双链表是否为空（带头结点）</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Empty</span><span class="hljs-params">(DLinklist L)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(L-&gt;next==L)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>双链表的插入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//在p结点之后插入s结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">InsertNextDNode</span><span class="hljs-params">(DNode *p,DNode *s)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>||s==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    s-&gt;next=p-&gt;next;  <span class="hljs-comment">//将结点*s插入到结点*p之后</span><br>    p-&gt;next-&gt;prior=s;<br>    s-&gt;prior=p;<br>    p-&gt;next=s;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>双链表的删除</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//删除结点p的后继结点</span><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">DeleteNextDNode</span><span class="hljs-params">(DNode *p)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//找到p的后继结点q</span><br>    DNode *q=p-&gt;next;<br>    <span class="hljs-keyword">if</span>(q==<span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    p-&gt;next=q-&gt;next;<br>    <span class="hljs-comment">//q结点不是最后一个结点</span><br>    q-&gt;next-&gt;prior=p;<br>    <span class="hljs-comment">//释放结点空间</span><br>    <span class="hljs-built_in">free</span>(q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><h3 id="什么是静态链表"><a href="#什么是静态链表" class="headerlink" title="什么是静态链表"></a>什么是静态链表</h3><p>分配一整片连续的内存空间，各个结点集中安置，每个结点中通过游标来寻找下一个结点。</p><p><em>静态链表是一种用数组来实现的链表，各个逻辑上相邻的结点在物理上不一定相邻</em></p><blockquote><p>静态链表不能随机存取，只能从头结点开始依次往后查找；容量固定不可变，故静态链表往往只适用于一些不支持指针的低级语言，或是数据元素数量固定不变的场景（如操作系统的文件分配表FAT）</p></blockquote><h3 id="用代码定义一个静态链表"><a href="#用代码定义一个静态链表" class="headerlink" title="用代码定义一个静态链表"></a>用代码定义一个静态链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10  <span class="hljs-comment">//静态链表的最大长度</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span>  <span class="hljs-comment">//静态链表结构类型的定义</span><br>    ElemType data;  <span class="hljs-comment">//存储数据元素</span><br>    <span class="hljs-keyword">int</span> next;  <span class="hljs-comment">//下一个元素的数组下标</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">testSLinkList</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> <span class="hljs-title">a</span>[<span class="hljs-title">MaxSize</span>];</span> <span class="hljs-comment">//数组a作为静态链表  </span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>其中，我们可以直接将数组作为一种类型，即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++">&gt;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10;</span><br>&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>  ElemType data;<br>  <span class="hljs-keyword">int</span> next;<br>&gt;&#125;SLinkList[MaxSize];<br></code></pre></td></tr></table></figure><p>如上代码也就等价于：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">&gt;<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MaxSize 10;</span><br>&gt;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>  ElemType data;<br>  <span class="hljs-keyword">int</span> next;<br>&gt;&#125;;<br>&gt;<span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> <span class="hljs-title">SLinkList</span>[<span class="hljs-title">MaxSize</span>];</span><br></code></pre></td></tr></table></figure></blockquote><hr/><hr/><hr/>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构（一）——绪论</title>
    <link href="/2021/04/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%BB%AA%E8%AE%BA/"/>
    <url>/2021/04/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<hr/><h1 id="数据结构在学什么"><a href="#数据结构在学什么" class="headerlink" title="数据结构在学什么"></a>数据结构在学什么</h1><ul><li>如何用程序代码把现实世界的问题信息化</li><li>如何用计算机高效地处理这些信息从而创造价值</li></ul><hr/><h1 id="数据结构的基本概念"><a href="#数据结构的基本概念" class="headerlink" title="数据结构的基本概念"></a>数据结构的基本概念</h1><h2 id="什么是数据？"><a href="#什么是数据？" class="headerlink" title="什么是数据？"></a>什么是数据？</h2><p>数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合。</p><p>数据是计算机程序加工的原料。</p><h2 id="数据元素、数据项"><a href="#数据元素、数据项" class="headerlink" title="数据元素、数据项"></a>数据元素、数据项</h2><p>数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。</p><p>一个数据元素可由若干个数据项构成，数据项是构成数据元素的不可分割的最小单位。</p><p><em>要根据实际的业务需求来确定什么是数据元素，什么是数据项</em></p><h2 id="数据结构、数据对象"><a href="#数据结构、数据对象" class="headerlink" title="数据结构、数据对象"></a>数据结构、数据对象</h2><p>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</p><p>数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</p><p>小结一下：<br><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1.JPG"></p><hr/><h1 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h1><p><em>讨论一种数据结构时，要关注的三个方面</em></p><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><ul><li>数据的逻辑结构<ul><li><strong>集合</strong>：各个元素同属一个集合，别无其他关系</li><li><strong>线性结构</strong>：数据结构之间是一对一的关系。除了第一个元素，所有元素都有唯一先驱；除了最后一个元素，所有元素都有唯一后继</li><li><strong>树形结构</strong>：数据元素之间是一对多的关系</li><li><strong>图状结构（网状结构）</strong>：数据元素之间是多对多的关系</li></ul></li></ul><h2 id="物理结构（存储结构）"><a href="#物理结构（存储结构）" class="headerlink" title="物理结构（存储结构）"></a>物理结构（存储结构）</h2><p>如何用计算机表示数据元素的逻辑关系？</p><ul><li>数据的存储结构<ul><li><strong>顺序存储</strong>：把相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现</li><li><strong>链式存储</strong>：逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系</li><li><strong>索引存储</strong>：在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是（关键字、地址）</li><li><strong>散列存储</strong>：根据数据元素的关键字直接计算出该元素的存储地址，又称哈希（Hash）存储</li></ul></li></ul><blockquote><p>数据的存储结构会影响存储空间分配的方便程度。<br>数据的存储结构会影响对数据运算的速度。</p></blockquote><h2 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h2><p>施加在数据上的运算包括运算的定义和实现。<span style="color:red">运算的定义是针对逻辑结构的</span>，指出运算的功能；<span style="color:red">运算的实现是针对存储结构的</span>，指出运算的具体步骤。</p><hr/><h1 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a>数据类型、抽象数据类型</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据类型是一个值的集合和定义在此集合上的一组操作的总称。</p><ol><li>原子类型。其值不可再分的数据类型</li><li>结构类型。其值可以再分解为若干成分（分量）的数据类型</li></ol><h2 id="抽象数据类型（Abstract-Data-Type，ADT）"><a href="#抽象数据类型（Abstract-Data-Type，ADT）" class="headerlink" title="抽象数据类型（Abstract Data Type，ADT）"></a>抽象数据类型（Abstract Data Type，ADT）</h2><p>抽象数据类型（Abstract Data Type，ADT）是抽象数据组织及与之相关的操作。<br><em>ADT用数学化的语言定义数据的逻辑结构、定义运算。与具体的实现无关。</em></p><hr/><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h2><p>程序=数据结构+算法</p><ul><li>数据结构：如何用数据正确地描述现实世界的问题，并存入计算机。</li><li>算法：如何高效地处理这些数据，以解决实际问题。</li></ul><p>算法（Algorithm）<strong>是对特定问题求解步骤的一种描述</strong>，它是指令的有限序列，其中的每条指令表示一个或多个操作</p><h2 id="算法的特性"><a href="#算法的特性" class="headerlink" title="算法的特性"></a>算法的特性</h2><ul><li><strong>有穷性</strong>：一个算法必须在执行有穷步之后结束，且每一步都可在有穷时间内完成。</li><li><strong>确定性</strong>：算法中每条指令必须具有确切的含义，对于相同的输入只能得到相同的输出。</li><li><strong>可行性</strong>：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。</li></ul><blockquote><p>输入：一个算法有零个或多个输入，这些输入取自某个特定对象的集合。<br/><br>输出：一个算法有零个或多个输出，这些输出是与输入有着某种特定关系的量。</p></blockquote><h2 id="好的算法应该具备的特质"><a href="#好的算法应该具备的特质" class="headerlink" title="好的算法应该具备的特质"></a>好的算法应该具备的特质</h2><ul><li>正确性：算法能够正确地解决问题。</li><li>可读性：算法应该具有良好的可读性，以帮助人们理解。</li><li>健壮性：输入非法数据时，算法能够适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li><li>高效率和低存储需求：时间复杂度低，空间复杂度低</li></ul><hr/><h1 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>时间开销与问题规模n之间的关系</strong></p><p>时间复杂度用T表示，即“Time”</p><p>计算法则：</p><ol><li>找到一个基本操作</li><li>分析该基本操作的执行次数x与问题规模n的关系x=f(n)</li><li>x的数量级O(x)就是算法的时间复杂度T(n)</li></ol><p>在我们考虑时间复杂度的时候，只需要考虑阶数高的部分。</p><blockquote><p>我们一般使用大O表示法来描述时间复杂度，大O表示“同阶”，同等数量级。即当n趋向于无穷的时候，二者之比为常数。<br><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8ET.JPG"></p></blockquote><h3 id="运算规则"><a href="#运算规则" class="headerlink" title="运算规则"></a>运算规则</h3><ul><li>加法规则：多项相加，只保留最高阶的项，且系数变为1</li><li>乘法规则：多项相乘，都保留<br><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%8A%A0%E6%B3%95%E8%A7%84%E5%88%99%E4%B8%8E%E4%B9%98%E6%B3%95%E8%A7%84%E5%88%99.JPG"></li></ul><p><br/><br/></p><blockquote><p>关于更大项的比较，这里有一个要熟稔于心、倒背如流的比较图：<br><img src="/img/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9B%B4%E5%A4%A7%E9%A1%B9%E6%AF%94%E8%BE%83%E5%9B%BE.JPG"><br>助记口令：“常对幂指阶”</p></blockquote><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>顺序执行的代码只会影响常数项，可以忽略</li><li>只需挑循环中的一个基本操作分析它的执行次数与n的关系即可</li><li>如果有多层嵌套循环，只需关注最深层循环了几次，浅层的循环都是低阶，都将被忽略</li><li>很多算法的执行时间和输入的数据是有关系的，对于这一类的算法我们需要考虑不同情况下的时间复杂度：<ol><li>最坏时间复杂度：最坏情况下算法的时间复杂度</li><li>最好时间复杂度（参考意义不大）：最好情况下算法的时间复杂度</li><li>平均时间复杂度：所有输入示例等概率出现的情况下，算法的期望运行时间</li></ol></li></ol><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>空间开销（内存开销）与问题规模n之间的关系</strong></p><p>空间复杂度用S表示，即“Space”</p><p>计算规则：</p><ol><li>考虑其代码段</li><li>考虑其数据段</li><li>综合考虑</li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>程序的空间复杂度若是常数阶，S(n)=O(1)，我们称这种算法为<strong>原地工作</strong>，即算法所需的内存空间为常量，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">saylove</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;=n)&#123;<br>        i++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I love you %d\n&quot;</span>,i);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;over&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>而更多的例子往往就不是“原地工作”了，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> flag[n];  <span class="hljs-comment">//声明一个长度为n的数组</span><br>    <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-comment">//…………</span><br>&#125;<br></code></pre></td></tr></table></figure><p>假设一个int变量占用4B<br>则所需内存空间=4+4n+4=4n+8<br>同理于时间复杂度，我们只需要关注最高阶，则此程序的空间复杂度S(n)=O(n)<br/><br><em>只需要关注存储空间大小与问题规模相关的变量</em><br><br/></p><h3 id="运算规则-1"><a href="#运算规则-1" class="headerlink" title="运算规则"></a>运算规则</h3><ul><li>加法规则：多项相加，只保留最高阶的项，且系数变为1</li><li>乘法规则：多项相乘，都保留</li></ul><h3 id="函数递归调用带来的内存开销"><a href="#函数递归调用带来的内存开销" class="headerlink" title="函数递归调用带来的内存开销"></a>函数递归调用带来的内存开销</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loveyou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a,b,c;  <span class="hljs-comment">//定义一系列局部变量</span><br>    <span class="hljs-comment">//……省略代码</span><br>    <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">1</span>)&#123;<br>        loveyou(n<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I love you %d\n&quot;</span>,n);<br>&#125;<br></code></pre></td></tr></table></figure><p>例如n=5，第一层数据段占用了3 *4=12个字节，第二层又是12个字节，则五层下来，最后是60个字节，即12n，故S(n)=O(n)。</p><p>对于递归程序，我们不要怕，老老实实分析每一层去找规律即可。<br><em>一般情况下递归程序的S(n)=kO(n)（k即多少层），这也就直接等于S(n)=O(n)</em></p><hr/><br/><br/><br/>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
